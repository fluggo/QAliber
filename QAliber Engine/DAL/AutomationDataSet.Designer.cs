//------------------------------------------------------------------------------
// <auto-generated>
//	   This code was generated by a tool.
//	   Runtime Version:2.0.50727.3607
//
//	   Changes to this file may cause incorrect behavior and will be lost if
//	   the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QAliber.DAL {
	
	
	/// <summary>
	///Represents a strongly typed in-memory cache of data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.Serializable()]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
	[global::System.Xml.Serialization.XmlRootAttribute("AutomationDataSet")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
	public partial class AutomationDataSet : global::System.Data.DataSet {
		
		private AgentsDataTable tableAgents;
		
		private TestCasesDataTable tableTestCases;
		
		private ApplicationsDataTable tableApplications;
		
		private RunsDataTable tableRuns;
		
		private ScenariosDataTable tableScenarios;
		
		private SchedulesDataTable tableSchedules;
		
		private TestCaseResultsDataTable tableTestCaseResults;
		
		private ScehdulerDetailsDataTable tableScehdulerDetails;
		
		private global::System.Data.DataRelation relationFK_Runs_Agents;
		
		private global::System.Data.DataRelation relationFK_Runs_Scenarios;
		
		private global::System.Data.DataRelation relationFK_Runs_Schedules;
		
		private global::System.Data.DataRelation relationFK_Schedules_Agents;
		
		private global::System.Data.DataRelation relationFK_Schedules_Scenarios;
		
		private global::System.Data.DataRelation relationFK_TestCaseResults_Runs;
		
		private global::System.Data.DataRelation relationFK_TestCaseResults_TestCases;
		
		private global::System.Data.DataRelation relationFK_Runs_Agents1;
		
		private global::System.Data.DataRelation relationFK_Schedules_Agents1;
		
		private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public AutomationDataSet() {
			this.BeginInit();
			this.InitClass();
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			base.Relations.CollectionChanged += schemaChangedHandler;
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected AutomationDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
				base(info, context, false) {
			if ((this.IsBinarySerialized(info, context) == true)) {
				this.InitVars(false);
				global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
				this.Tables.CollectionChanged += schemaChangedHandler1;
				this.Relations.CollectionChanged += schemaChangedHandler1;
				return;
			}
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
				if ((ds.Tables["Agents"] != null)) {
					base.Tables.Add(new AgentsDataTable(ds.Tables["Agents"]));
				}
				if ((ds.Tables["TestCases"] != null)) {
					base.Tables.Add(new TestCasesDataTable(ds.Tables["TestCases"]));
				}
				if ((ds.Tables["Applications"] != null)) {
					base.Tables.Add(new ApplicationsDataTable(ds.Tables["Applications"]));
				}
				if ((ds.Tables["Runs"] != null)) {
					base.Tables.Add(new RunsDataTable(ds.Tables["Runs"]));
				}
				if ((ds.Tables["Scenarios"] != null)) {
					base.Tables.Add(new ScenariosDataTable(ds.Tables["Scenarios"]));
				}
				if ((ds.Tables["Schedules"] != null)) {
					base.Tables.Add(new SchedulesDataTable(ds.Tables["Schedules"]));
				}
				if ((ds.Tables["TestCaseResults"] != null)) {
					base.Tables.Add(new TestCaseResultsDataTable(ds.Tables["TestCaseResults"]));
				}
				if ((ds.Tables["ScehdulerDetails"] != null)) {
					base.Tables.Add(new ScehdulerDetailsDataTable(ds.Tables["ScehdulerDetails"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else {
				this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
			}
			this.GetSerializationData(info, context);
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public AgentsDataTable Agents {
			get {
				return this.tableAgents;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public TestCasesDataTable TestCases {
			get {
				return this.tableTestCases;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public ApplicationsDataTable Applications {
			get {
				return this.tableApplications;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public RunsDataTable Runs {
			get {
				return this.tableRuns;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public ScenariosDataTable Scenarios {
			get {
				return this.tableScenarios;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public SchedulesDataTable Schedules {
			get {
				return this.tableSchedules;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public TestCaseResultsDataTable TestCaseResults {
			get {
				return this.tableTestCaseResults;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public ScehdulerDetailsDataTable ScehdulerDetails {
			get {
				return this.tableScehdulerDetails;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.BrowsableAttribute(true)]
		[global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
		public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
			get {
				return this._schemaSerializationMode;
			}
			set {
				this._schemaSerializationMode = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		public new global::System.Data.DataTableCollection Tables {
			get {
				return base.Tables;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		public new global::System.Data.DataRelationCollection Relations {
			get {
				return base.Relations;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override void InitializeDerivedDataSet() {
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public override global::System.Data.DataSet Clone() {
			AutomationDataSet cln = ((AutomationDataSet)(base.Clone()));
			cln.InitVars();
			cln.SchemaSerializationMode = this.SchemaSerializationMode;
			return cln;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override bool ShouldSerializeTables() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
			if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
				this.Reset();
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXml(reader);
				if ((ds.Tables["Agents"] != null)) {
					base.Tables.Add(new AgentsDataTable(ds.Tables["Agents"]));
				}
				if ((ds.Tables["TestCases"] != null)) {
					base.Tables.Add(new TestCasesDataTable(ds.Tables["TestCases"]));
				}
				if ((ds.Tables["Applications"] != null)) {
					base.Tables.Add(new ApplicationsDataTable(ds.Tables["Applications"]));
				}
				if ((ds.Tables["Runs"] != null)) {
					base.Tables.Add(new RunsDataTable(ds.Tables["Runs"]));
				}
				if ((ds.Tables["Scenarios"] != null)) {
					base.Tables.Add(new ScenariosDataTable(ds.Tables["Scenarios"]));
				}
				if ((ds.Tables["Schedules"] != null)) {
					base.Tables.Add(new SchedulesDataTable(ds.Tables["Schedules"]));
				}
				if ((ds.Tables["TestCaseResults"] != null)) {
					base.Tables.Add(new TestCaseResultsDataTable(ds.Tables["TestCaseResults"]));
				}
				if ((ds.Tables["ScehdulerDetails"] != null)) {
					base.Tables.Add(new ScehdulerDetailsDataTable(ds.Tables["ScehdulerDetails"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else {
				this.ReadXml(reader);
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
			this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
			stream.Position = 0;
			return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal void InitVars() {
			this.InitVars(true);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal void InitVars(bool initTable) {
			this.tableAgents = ((AgentsDataTable)(base.Tables["Agents"]));
			if ((initTable == true)) {
				if ((this.tableAgents != null)) {
					this.tableAgents.InitVars();
				}
			}
			this.tableTestCases = ((TestCasesDataTable)(base.Tables["TestCases"]));
			if ((initTable == true)) {
				if ((this.tableTestCases != null)) {
					this.tableTestCases.InitVars();
				}
			}
			this.tableApplications = ((ApplicationsDataTable)(base.Tables["Applications"]));
			if ((initTable == true)) {
				if ((this.tableApplications != null)) {
					this.tableApplications.InitVars();
				}
			}
			this.tableRuns = ((RunsDataTable)(base.Tables["Runs"]));
			if ((initTable == true)) {
				if ((this.tableRuns != null)) {
					this.tableRuns.InitVars();
				}
			}
			this.tableScenarios = ((ScenariosDataTable)(base.Tables["Scenarios"]));
			if ((initTable == true)) {
				if ((this.tableScenarios != null)) {
					this.tableScenarios.InitVars();
				}
			}
			this.tableSchedules = ((SchedulesDataTable)(base.Tables["Schedules"]));
			if ((initTable == true)) {
				if ((this.tableSchedules != null)) {
					this.tableSchedules.InitVars();
				}
			}
			this.tableTestCaseResults = ((TestCaseResultsDataTable)(base.Tables["TestCaseResults"]));
			if ((initTable == true)) {
				if ((this.tableTestCaseResults != null)) {
					this.tableTestCaseResults.InitVars();
				}
			}
			this.tableScehdulerDetails = ((ScehdulerDetailsDataTable)(base.Tables["ScehdulerDetails"]));
			if ((initTable == true)) {
				if ((this.tableScehdulerDetails != null)) {
					this.tableScehdulerDetails.InitVars();
				}
			}
			this.relationFK_Runs_Agents = this.Relations["FK_Runs_Agents"];
			this.relationFK_Runs_Scenarios = this.Relations["FK_Runs_Scenarios"];
			this.relationFK_Runs_Schedules = this.Relations["FK_Runs_Schedules"];
			this.relationFK_Schedules_Agents = this.Relations["FK_Schedules_Agents"];
			this.relationFK_Schedules_Scenarios = this.Relations["FK_Schedules_Scenarios"];
			this.relationFK_TestCaseResults_Runs = this.Relations["FK_TestCaseResults_Runs"];
			this.relationFK_TestCaseResults_TestCases = this.Relations["FK_TestCaseResults_TestCases"];
			this.relationFK_Runs_Agents1 = this.Relations["FK_Runs_Agents1"];
			this.relationFK_Schedules_Agents1 = this.Relations["FK_Schedules_Agents1"];
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitClass() {
			this.DataSetName = "AutomationDataSet";
			this.Prefix = "";
			this.Namespace = "http://tempuri.org/AutomationDataSet.xsd";
			this.EnforceConstraints = true;
			this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
			this.tableAgents = new AgentsDataTable();
			base.Tables.Add(this.tableAgents);
			this.tableTestCases = new TestCasesDataTable();
			base.Tables.Add(this.tableTestCases);
			this.tableApplications = new ApplicationsDataTable();
			base.Tables.Add(this.tableApplications);
			this.tableRuns = new RunsDataTable();
			base.Tables.Add(this.tableRuns);
			this.tableScenarios = new ScenariosDataTable();
			base.Tables.Add(this.tableScenarios);
			this.tableSchedules = new SchedulesDataTable();
			base.Tables.Add(this.tableSchedules);
			this.tableTestCaseResults = new TestCaseResultsDataTable();
			base.Tables.Add(this.tableTestCaseResults);
			this.tableScehdulerDetails = new ScehdulerDetailsDataTable();
			base.Tables.Add(this.tableScehdulerDetails);
			this.relationFK_Runs_Agents = new global::System.Data.DataRelation("FK_Runs_Agents", new global::System.Data.DataColumn[] {
						this.tableAgents.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableRuns.AgentIDColumn}, false);
			this.Relations.Add(this.relationFK_Runs_Agents);
			this.relationFK_Runs_Scenarios = new global::System.Data.DataRelation("FK_Runs_Scenarios", new global::System.Data.DataColumn[] {
						this.tableScenarios.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableRuns.ScenarioIDColumn}, false);
			this.Relations.Add(this.relationFK_Runs_Scenarios);
			this.relationFK_Runs_Schedules = new global::System.Data.DataRelation("FK_Runs_Schedules", new global::System.Data.DataColumn[] {
						this.tableSchedules.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableRuns.ScheduleIDColumn}, false);
			this.Relations.Add(this.relationFK_Runs_Schedules);
			this.relationFK_Schedules_Agents = new global::System.Data.DataRelation("FK_Schedules_Agents", new global::System.Data.DataColumn[] {
						this.tableAgents.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableSchedules.AgentIDColumn}, false);
			this.Relations.Add(this.relationFK_Schedules_Agents);
			this.relationFK_Schedules_Scenarios = new global::System.Data.DataRelation("FK_Schedules_Scenarios", new global::System.Data.DataColumn[] {
						this.tableScenarios.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableSchedules.ScenarioIDColumn}, false);
			this.Relations.Add(this.relationFK_Schedules_Scenarios);
			this.relationFK_TestCaseResults_Runs = new global::System.Data.DataRelation("FK_TestCaseResults_Runs", new global::System.Data.DataColumn[] {
						this.tableRuns.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableTestCaseResults.RunIDColumn}, false);
			this.Relations.Add(this.relationFK_TestCaseResults_Runs);
			this.relationFK_TestCaseResults_TestCases = new global::System.Data.DataRelation("FK_TestCaseResults_TestCases", new global::System.Data.DataColumn[] {
						this.tableTestCases.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableTestCaseResults.TestCaseIDColumn}, false);
			this.Relations.Add(this.relationFK_TestCaseResults_TestCases);
			this.relationFK_Runs_Agents1 = new global::System.Data.DataRelation("FK_Runs_Agents1", new global::System.Data.DataColumn[] {
						this.tableScehdulerDetails.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableRuns.AgentIDColumn}, false);
			this.Relations.Add(this.relationFK_Runs_Agents1);
			this.relationFK_Schedules_Agents1 = new global::System.Data.DataRelation("FK_Schedules_Agents1", new global::System.Data.DataColumn[] {
						this.tableScehdulerDetails.IDColumn}, new global::System.Data.DataColumn[] {
						this.tableSchedules.AgentIDColumn}, false);
			this.Relations.Add(this.relationFK_Schedules_Agents1);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeAgents() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeTestCases() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeApplications() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeRuns() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeScenarios() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeSchedules() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeTestCaseResults() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeScehdulerDetails() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
			if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
			AutomationDataSet ds = new AutomationDataSet();
			global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
			global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
			global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
			if (xs.Contains(dsSchema.TargetNamespace)) {
				global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
				global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
				try {
					global::System.Xml.Schema.XmlSchema schema = null;
					dsSchema.Write(s1);
					for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
						schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
						s2.SetLength(0);
						schema.Write(s2);
						if ((s1.Length == s2.Length)) {
							s1.Position = 0;
							s2.Position = 0;
							for (; ((s1.Position != s1.Length) 
										&& (s1.ReadByte() == s2.ReadByte())); ) {
								;
							}
							if ((s1.Position == s1.Length)) {
								return type;
							}
						}
					}
				}
				finally {
					if ((s1 != null)) {
						s1.Close();
					}
					if ((s2 != null)) {
						s2.Close();
					}
				}
			}
			xs.Add(dsSchema);
			return type;
		}
		
		public delegate void AgentsRowChangeEventHandler(object sender, AgentsRowChangeEvent e);
		
		public delegate void TestCasesRowChangeEventHandler(object sender, TestCasesRowChangeEvent e);
		
		public delegate void ApplicationsRowChangeEventHandler(object sender, ApplicationsRowChangeEvent e);
		
		public delegate void RunsRowChangeEventHandler(object sender, RunsRowChangeEvent e);
		
		public delegate void ScenariosRowChangeEventHandler(object sender, ScenariosRowChangeEvent e);
		
		public delegate void SchedulesRowChangeEventHandler(object sender, SchedulesRowChangeEvent e);
		
		public delegate void TestCaseResultsRowChangeEventHandler(object sender, TestCaseResultsRowChangeEvent e);
		
		public delegate void ScehdulerDetailsRowChangeEventHandler(object sender, ScehdulerDetailsRowChangeEvent e);
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class AgentsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnIP;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnCPU;
			
			private global::System.Data.DataColumn columnMemory;
			
			private global::System.Data.DataColumn columnModel;
			
			private global::System.Data.DataColumn columnOS;
			
			private global::System.Data.DataColumn columnStatus;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsDataTable() {
				this.TableName = "Agents";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal AgentsDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected AgentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IPColumn {
				get {
					return this.columnIP;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn NameColumn {
				get {
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn CPUColumn {
				get {
					return this.columnCPU;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn MemoryColumn {
				get {
					return this.columnMemory;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn ModelColumn {
				get {
					return this.columnModel;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn OSColumn {
				get {
					return this.columnOS;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn StatusColumn {
				get {
					return this.columnStatus;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsRow this[int index] {
				get {
					return ((AgentsRow)(this.Rows[index]));
				}
			}
			
			public event AgentsRowChangeEventHandler AgentsRowChanging;
			
			public event AgentsRowChangeEventHandler AgentsRowChanged;
			
			public event AgentsRowChangeEventHandler AgentsRowDeleting;
			
			public event AgentsRowChangeEventHandler AgentsRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddAgentsRow(AgentsRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsRow AddAgentsRow(string IP, string Name, string CPU, int Memory, string Model, string OS, int Status) {
				AgentsRow rowAgentsRow = ((AgentsRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						null,
						IP,
						Name,
						CPU,
						Memory,
						Model,
						OS,
						Status};
				rowAgentsRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowAgentsRow);
				return rowAgentsRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsRow FindByID(int ID) {
				return ((AgentsRow)(this.Rows.Find(new object[] {
							ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				AgentsDataTable cln = ((AgentsDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new AgentsDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnID = base.Columns["ID"];
				this.columnIP = base.Columns["IP"];
				this.columnName = base.Columns["Name"];
				this.columnCPU = base.Columns["CPU"];
				this.columnMemory = base.Columns["Memory"];
				this.columnModel = base.Columns["Model"];
				this.columnOS = base.Columns["OS"];
				this.columnStatus = base.Columns["Status"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnIP = new global::System.Data.DataColumn("IP", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnIP);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnCPU = new global::System.Data.DataColumn("CPU", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnCPU);
				this.columnMemory = new global::System.Data.DataColumn("Memory", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnMemory);
				this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnModel);
				this.columnOS = new global::System.Data.DataColumn("OS", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnOS);
				this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnStatus);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
								this.columnID}, true));
				this.columnID.AutoIncrement = true;
				this.columnID.AllowDBNull = false;
				this.columnID.ReadOnly = true;
				this.columnID.Unique = true;
				this.columnIP.MaxLength = 20;
				this.columnName.MaxLength = 50;
				this.columnCPU.MaxLength = 50;
				this.columnModel.MaxLength = 50;
				this.columnOS.MaxLength = 50;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsRow NewAgentsRow() {
				return ((AgentsRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new AgentsRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(AgentsRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.AgentsRowChanged != null)) {
					this.AgentsRowChanged(this, new AgentsRowChangeEvent(((AgentsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.AgentsRowChanging != null)) {
					this.AgentsRowChanging(this, new AgentsRowChangeEvent(((AgentsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.AgentsRowDeleted != null)) {
					this.AgentsRowDeleted(this, new AgentsRowChangeEvent(((AgentsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.AgentsRowDeleting != null)) {
					this.AgentsRowDeleting(this, new AgentsRowChangeEvent(((AgentsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveAgentsRow(AgentsRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				AutomationDataSet ds = new AutomationDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "AgentsDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class TestCasesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnHelpURL;
			
			private global::System.Data.DataColumn columnDefinedInDLL;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCasesDataTable() {
				this.TableName = "TestCases";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal TestCasesDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected TestCasesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn NameColumn {
				get {
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn DescriptionColumn {
				get {
					return this.columnDescription;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn HelpURLColumn {
				get {
					return this.columnHelpURL;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn DefinedInDLLColumn {
				get {
					return this.columnDefinedInDLL;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCasesRow this[int index] {
				get {
					return ((TestCasesRow)(this.Rows[index]));
				}
			}
			
			public event TestCasesRowChangeEventHandler TestCasesRowChanging;
			
			public event TestCasesRowChangeEventHandler TestCasesRowChanged;
			
			public event TestCasesRowChangeEventHandler TestCasesRowDeleting;
			
			public event TestCasesRowChangeEventHandler TestCasesRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddTestCasesRow(TestCasesRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCasesRow AddTestCasesRow(string Name, string Description, string HelpURL, string DefinedInDLL) {
				TestCasesRow rowTestCasesRow = ((TestCasesRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						null,
						Name,
						Description,
						HelpURL,
						DefinedInDLL};
				rowTestCasesRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowTestCasesRow);
				return rowTestCasesRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCasesRow FindByID(int ID) {
				return ((TestCasesRow)(this.Rows.Find(new object[] {
							ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				TestCasesDataTable cln = ((TestCasesDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new TestCasesDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnID = base.Columns["ID"];
				this.columnName = base.Columns["Name"];
				this.columnDescription = base.Columns["Description"];
				this.columnHelpURL = base.Columns["HelpURL"];
				this.columnDefinedInDLL = base.Columns["DefinedInDLL"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnDescription);
				this.columnHelpURL = new global::System.Data.DataColumn("HelpURL", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnHelpURL);
				this.columnDefinedInDLL = new global::System.Data.DataColumn("DefinedInDLL", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnDefinedInDLL);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
								this.columnID}, true));
				this.columnID.AutoIncrement = true;
				this.columnID.AllowDBNull = false;
				this.columnID.ReadOnly = true;
				this.columnID.Unique = true;
				this.columnName.MaxLength = 400;
				this.columnDescription.MaxLength = 2147483647;
				this.columnHelpURL.MaxLength = 2147483647;
				this.columnDefinedInDLL.MaxLength = 2147483647;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCasesRow NewTestCasesRow() {
				return ((TestCasesRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new TestCasesRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(TestCasesRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.TestCasesRowChanged != null)) {
					this.TestCasesRowChanged(this, new TestCasesRowChangeEvent(((TestCasesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.TestCasesRowChanging != null)) {
					this.TestCasesRowChanging(this, new TestCasesRowChangeEvent(((TestCasesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.TestCasesRowDeleted != null)) {
					this.TestCasesRowDeleted(this, new TestCasesRowChangeEvent(((TestCasesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.TestCasesRowDeleting != null)) {
					this.TestCasesRowDeleting(this, new TestCasesRowChangeEvent(((TestCasesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveTestCasesRow(TestCasesRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				AutomationDataSet ds = new AutomationDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "TestCasesDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class ApplicationsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnProduct;
			
			private global::System.Data.DataColumn columnProject;
			
			private global::System.Data.DataColumn columnSWVersion;
			
			private global::System.Data.DataColumn columnOtherVersions;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ApplicationsDataTable() {
				this.TableName = "Applications";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal ApplicationsDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected ApplicationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn ProductColumn {
				get {
					return this.columnProduct;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn ProjectColumn {
				get {
					return this.columnProject;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn SWVersionColumn {
				get {
					return this.columnSWVersion;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn OtherVersionsColumn {
				get {
					return this.columnOtherVersions;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ApplicationsRow this[int index] {
				get {
					return ((ApplicationsRow)(this.Rows[index]));
				}
			}
			
			public event ApplicationsRowChangeEventHandler ApplicationsRowChanging;
			
			public event ApplicationsRowChangeEventHandler ApplicationsRowChanged;
			
			public event ApplicationsRowChangeEventHandler ApplicationsRowDeleting;
			
			public event ApplicationsRowChangeEventHandler ApplicationsRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddApplicationsRow(ApplicationsRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ApplicationsRow AddApplicationsRow(string Product, string Project, string SWVersion, string OtherVersions) {
				ApplicationsRow rowApplicationsRow = ((ApplicationsRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						null,
						Product,
						Project,
						SWVersion,
						OtherVersions};
				rowApplicationsRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowApplicationsRow);
				return rowApplicationsRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ApplicationsRow FindByID(int ID) {
				return ((ApplicationsRow)(this.Rows.Find(new object[] {
							ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				ApplicationsDataTable cln = ((ApplicationsDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new ApplicationsDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnID = base.Columns["ID"];
				this.columnProduct = base.Columns["Product"];
				this.columnProject = base.Columns["Project"];
				this.columnSWVersion = base.Columns["SWVersion"];
				this.columnOtherVersions = base.Columns["OtherVersions"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnProduct = new global::System.Data.DataColumn("Product", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnProduct);
				this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnProject);
				this.columnSWVersion = new global::System.Data.DataColumn("SWVersion", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnSWVersion);
				this.columnOtherVersions = new global::System.Data.DataColumn("OtherVersions", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnOtherVersions);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
								this.columnID}, true));
				this.columnID.AutoIncrement = true;
				this.columnID.AllowDBNull = false;
				this.columnID.ReadOnly = true;
				this.columnID.Unique = true;
				this.columnProduct.MaxLength = 50;
				this.columnProject.MaxLength = 50;
				this.columnSWVersion.MaxLength = 50;
				this.columnOtherVersions.MaxLength = 50;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ApplicationsRow NewApplicationsRow() {
				return ((ApplicationsRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new ApplicationsRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(ApplicationsRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ApplicationsRowChanged != null)) {
					this.ApplicationsRowChanged(this, new ApplicationsRowChangeEvent(((ApplicationsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ApplicationsRowChanging != null)) {
					this.ApplicationsRowChanging(this, new ApplicationsRowChangeEvent(((ApplicationsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ApplicationsRowDeleted != null)) {
					this.ApplicationsRowDeleted(this, new ApplicationsRowChangeEvent(((ApplicationsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ApplicationsRowDeleting != null)) {
					this.ApplicationsRowDeleting(this, new ApplicationsRowChangeEvent(((ApplicationsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveApplicationsRow(ApplicationsRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				AutomationDataSet ds = new AutomationDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "ApplicationsDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class RunsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnScheduleID;
			
			private global::System.Data.DataColumn columnScenarioID;
			
			private global::System.Data.DataColumn columnAgentID;
			
			private global::System.Data.DataColumn columnStartTime;
			
			private global::System.Data.DataColumn columnEndTime;
			
			private global::System.Data.DataColumn columnLogFilename;
			
			private global::System.Data.DataColumn columnStatus;
			
			private global::System.Data.DataColumn columnPercentsPassed;
			
			private global::System.Data.DataColumn columnPercentsSkipped;
			
			private global::System.Data.DataColumn columnPercentsFailed;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsDataTable() {
				this.TableName = "Runs";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal RunsDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected RunsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn ScheduleIDColumn {
				get {
					return this.columnScheduleID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn ScenarioIDColumn {
				get {
					return this.columnScenarioID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn AgentIDColumn {
				get {
					return this.columnAgentID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn StartTimeColumn {
				get {
					return this.columnStartTime;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn EndTimeColumn {
				get {
					return this.columnEndTime;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn LogFilenameColumn {
				get {
					return this.columnLogFilename;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn StatusColumn {
				get {
					return this.columnStatus;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn PercentsPassedColumn {
				get {
					return this.columnPercentsPassed;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn PercentsSkippedColumn {
				get {
					return this.columnPercentsSkipped;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn PercentsFailedColumn {
				get {
					return this.columnPercentsFailed;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow this[int index] {
				get {
					return ((RunsRow)(this.Rows[index]));
				}
			}
			
			public event RunsRowChangeEventHandler RunsRowChanging;
			
			public event RunsRowChangeEventHandler RunsRowChanged;
			
			public event RunsRowChangeEventHandler RunsRowDeleting;
			
			public event RunsRowChangeEventHandler RunsRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddRunsRow(RunsRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow AddRunsRow(SchedulesRow parentSchedulesRowByFK_Runs_Schedules, ScenariosRow parentScenariosRowByFK_Runs_Scenarios, AgentsRow parentAgentsRowByFK_Runs_Agents, System.DateTime StartTime, System.DateTime EndTime, string LogFilename, int Status, double PercentsPassed, double PercentsSkipped, double PercentsFailed) {
				RunsRow rowRunsRow = ((RunsRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						null,
						null,
						null,
						null,
						StartTime,
						EndTime,
						LogFilename,
						Status,
						PercentsPassed,
						PercentsSkipped,
						PercentsFailed};
				if ((parentSchedulesRowByFK_Runs_Schedules != null)) {
					columnValuesArray[1] = parentSchedulesRowByFK_Runs_Schedules[0];
				}
				if ((parentScenariosRowByFK_Runs_Scenarios != null)) {
					columnValuesArray[2] = parentScenariosRowByFK_Runs_Scenarios[0];
				}
				if ((parentAgentsRowByFK_Runs_Agents != null)) {
					columnValuesArray[3] = parentAgentsRowByFK_Runs_Agents[0];
				}
				rowRunsRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowRunsRow);
				return rowRunsRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow FindByID(int ID) {
				return ((RunsRow)(this.Rows.Find(new object[] {
							ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				RunsDataTable cln = ((RunsDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new RunsDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnID = base.Columns["ID"];
				this.columnScheduleID = base.Columns["ScheduleID"];
				this.columnScenarioID = base.Columns["ScenarioID"];
				this.columnAgentID = base.Columns["AgentID"];
				this.columnStartTime = base.Columns["StartTime"];
				this.columnEndTime = base.Columns["EndTime"];
				this.columnLogFilename = base.Columns["LogFilename"];
				this.columnStatus = base.Columns["Status"];
				this.columnPercentsPassed = base.Columns["PercentsPassed"];
				this.columnPercentsSkipped = base.Columns["PercentsSkipped"];
				this.columnPercentsFailed = base.Columns["PercentsFailed"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnScheduleID = new global::System.Data.DataColumn("ScheduleID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnScheduleID);
				this.columnScenarioID = new global::System.Data.DataColumn("ScenarioID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnScenarioID);
				this.columnAgentID = new global::System.Data.DataColumn("AgentID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnAgentID);
				this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnStartTime);
				this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnEndTime);
				this.columnLogFilename = new global::System.Data.DataColumn("LogFilename", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnLogFilename);
				this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnStatus);
				this.columnPercentsPassed = new global::System.Data.DataColumn("PercentsPassed", typeof(double), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnPercentsPassed);
				this.columnPercentsSkipped = new global::System.Data.DataColumn("PercentsSkipped", typeof(double), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnPercentsSkipped);
				this.columnPercentsFailed = new global::System.Data.DataColumn("PercentsFailed", typeof(double), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnPercentsFailed);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
								this.columnID}, true));
				this.columnID.AutoIncrement = true;
				this.columnID.AllowDBNull = false;
				this.columnID.ReadOnly = true;
				this.columnID.Unique = true;
				this.columnLogFilename.MaxLength = 2147483647;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow NewRunsRow() {
				return ((RunsRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new RunsRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(RunsRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.RunsRowChanged != null)) {
					this.RunsRowChanged(this, new RunsRowChangeEvent(((RunsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.RunsRowChanging != null)) {
					this.RunsRowChanging(this, new RunsRowChangeEvent(((RunsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.RunsRowDeleted != null)) {
					this.RunsRowDeleted(this, new RunsRowChangeEvent(((RunsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.RunsRowDeleting != null)) {
					this.RunsRowDeleting(this, new RunsRowChangeEvent(((RunsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveRunsRow(RunsRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				AutomationDataSet ds = new AutomationDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "RunsDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class ScenariosDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnFilename;
			
			private global::System.Data.DataColumn columnAttachments;
			
			private global::System.Data.DataColumn columnLastModified;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosDataTable() {
				this.TableName = "Scenarios";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal ScenariosDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected ScenariosDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn NameColumn {
				get {
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn DescriptionColumn {
				get {
					return this.columnDescription;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn FilenameColumn {
				get {
					return this.columnFilename;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn AttachmentsColumn {
				get {
					return this.columnAttachments;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn LastModifiedColumn {
				get {
					return this.columnLastModified;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosRow this[int index] {
				get {
					return ((ScenariosRow)(this.Rows[index]));
				}
			}
			
			public event ScenariosRowChangeEventHandler ScenariosRowChanging;
			
			public event ScenariosRowChangeEventHandler ScenariosRowChanged;
			
			public event ScenariosRowChangeEventHandler ScenariosRowDeleting;
			
			public event ScenariosRowChangeEventHandler ScenariosRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddScenariosRow(ScenariosRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosRow AddScenariosRow(string Name, string Description, string Filename, string Attachments, System.DateTime LastModified) {
				ScenariosRow rowScenariosRow = ((ScenariosRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						null,
						Name,
						Description,
						Filename,
						Attachments,
						LastModified};
				rowScenariosRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowScenariosRow);
				return rowScenariosRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosRow FindByID(int ID) {
				return ((ScenariosRow)(this.Rows.Find(new object[] {
							ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				ScenariosDataTable cln = ((ScenariosDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new ScenariosDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnID = base.Columns["ID"];
				this.columnName = base.Columns["Name"];
				this.columnDescription = base.Columns["Description"];
				this.columnFilename = base.Columns["Filename"];
				this.columnAttachments = base.Columns["Attachments"];
				this.columnLastModified = base.Columns["LastModified"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnDescription);
				this.columnFilename = new global::System.Data.DataColumn("Filename", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnFilename);
				this.columnAttachments = new global::System.Data.DataColumn("Attachments", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnAttachments);
				this.columnLastModified = new global::System.Data.DataColumn("LastModified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnLastModified);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
								this.columnID}, true));
				this.columnID.AutoIncrement = true;
				this.columnID.AllowDBNull = false;
				this.columnID.ReadOnly = true;
				this.columnID.Unique = true;
				this.columnName.AllowDBNull = false;
				this.columnName.MaxLength = 50;
				this.columnDescription.MaxLength = 2147483647;
				this.columnFilename.AllowDBNull = false;
				this.columnFilename.MaxLength = 2147483647;
				this.columnAttachments.MaxLength = 2147483647;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosRow NewScenariosRow() {
				return ((ScenariosRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new ScenariosRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(ScenariosRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ScenariosRowChanged != null)) {
					this.ScenariosRowChanged(this, new ScenariosRowChangeEvent(((ScenariosRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ScenariosRowChanging != null)) {
					this.ScenariosRowChanging(this, new ScenariosRowChangeEvent(((ScenariosRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ScenariosRowDeleted != null)) {
					this.ScenariosRowDeleted(this, new ScenariosRowChangeEvent(((ScenariosRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ScenariosRowDeleting != null)) {
					this.ScenariosRowDeleting(this, new ScenariosRowChangeEvent(((ScenariosRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveScenariosRow(ScenariosRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				AutomationDataSet ds = new AutomationDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "ScenariosDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class SchedulesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnAgentID;
			
			private global::System.Data.DataColumn columnScenarioID;
			
			private global::System.Data.DataColumn columnUserID;
			
			private global::System.Data.DataColumn columnStartTime;
			
			private global::System.Data.DataColumn columnEndTime;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesDataTable() {
				this.TableName = "Schedules";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal SchedulesDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected SchedulesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn AgentIDColumn {
				get {
					return this.columnAgentID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn ScenarioIDColumn {
				get {
					return this.columnScenarioID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn UserIDColumn {
				get {
					return this.columnUserID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn StartTimeColumn {
				get {
					return this.columnStartTime;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn EndTimeColumn {
				get {
					return this.columnEndTime;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow this[int index] {
				get {
					return ((SchedulesRow)(this.Rows[index]));
				}
			}
			
			public event SchedulesRowChangeEventHandler SchedulesRowChanging;
			
			public event SchedulesRowChangeEventHandler SchedulesRowChanged;
			
			public event SchedulesRowChangeEventHandler SchedulesRowDeleting;
			
			public event SchedulesRowChangeEventHandler SchedulesRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddSchedulesRow(SchedulesRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow AddSchedulesRow(AgentsRow parentAgentsRowByFK_Schedules_Agents, ScenariosRow parentScenariosRowByFK_Schedules_Scenarios, int UserID, System.DateTime StartTime, System.DateTime EndTime) {
				SchedulesRow rowSchedulesRow = ((SchedulesRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						null,
						null,
						null,
						UserID,
						StartTime,
						EndTime};
				if ((parentAgentsRowByFK_Schedules_Agents != null)) {
					columnValuesArray[1] = parentAgentsRowByFK_Schedules_Agents[0];
				}
				if ((parentScenariosRowByFK_Schedules_Scenarios != null)) {
					columnValuesArray[2] = parentScenariosRowByFK_Schedules_Scenarios[0];
				}
				rowSchedulesRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSchedulesRow);
				return rowSchedulesRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow FindByID(int ID) {
				return ((SchedulesRow)(this.Rows.Find(new object[] {
							ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				SchedulesDataTable cln = ((SchedulesDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new SchedulesDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnID = base.Columns["ID"];
				this.columnAgentID = base.Columns["AgentID"];
				this.columnScenarioID = base.Columns["ScenarioID"];
				this.columnUserID = base.Columns["UserID"];
				this.columnStartTime = base.Columns["StartTime"];
				this.columnEndTime = base.Columns["EndTime"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnAgentID = new global::System.Data.DataColumn("AgentID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnAgentID);
				this.columnScenarioID = new global::System.Data.DataColumn("ScenarioID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnScenarioID);
				this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUserID);
				this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnStartTime);
				this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnEndTime);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
								this.columnID}, true));
				this.columnID.AutoIncrement = true;
				this.columnID.AllowDBNull = false;
				this.columnID.ReadOnly = true;
				this.columnID.Unique = true;
				this.columnAgentID.AllowDBNull = false;
				this.columnScenarioID.AllowDBNull = false;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow NewSchedulesRow() {
				return ((SchedulesRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new SchedulesRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(SchedulesRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.SchedulesRowChanged != null)) {
					this.SchedulesRowChanged(this, new SchedulesRowChangeEvent(((SchedulesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.SchedulesRowChanging != null)) {
					this.SchedulesRowChanging(this, new SchedulesRowChangeEvent(((SchedulesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.SchedulesRowDeleted != null)) {
					this.SchedulesRowDeleted(this, new SchedulesRowChangeEvent(((SchedulesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.SchedulesRowDeleting != null)) {
					this.SchedulesRowDeleting(this, new SchedulesRowChangeEvent(((SchedulesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveSchedulesRow(SchedulesRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				AutomationDataSet ds = new AutomationDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SchedulesDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class TestCaseResultsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnRunID;
			
			private global::System.Data.DataColumn columnTestCaseID;
			
			private global::System.Data.DataColumn columnTimeStarted;
			
			private global::System.Data.DataColumn columnTimeEnded;
			
			private global::System.Data.DataColumn columnStatus;
			
			private global::System.Data.DataColumn columnErrors;
			
			private global::System.Data.DataColumn columnWarnings;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsDataTable() {
				this.TableName = "TestCaseResults";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal TestCaseResultsDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected TestCaseResultsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn RunIDColumn {
				get {
					return this.columnRunID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn TestCaseIDColumn {
				get {
					return this.columnTestCaseID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn TimeStartedColumn {
				get {
					return this.columnTimeStarted;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn TimeEndedColumn {
				get {
					return this.columnTimeEnded;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn StatusColumn {
				get {
					return this.columnStatus;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn ErrorsColumn {
				get {
					return this.columnErrors;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn WarningsColumn {
				get {
					return this.columnWarnings;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsRow this[int index] {
				get {
					return ((TestCaseResultsRow)(this.Rows[index]));
				}
			}
			
			public event TestCaseResultsRowChangeEventHandler TestCaseResultsRowChanging;
			
			public event TestCaseResultsRowChangeEventHandler TestCaseResultsRowChanged;
			
			public event TestCaseResultsRowChangeEventHandler TestCaseResultsRowDeleting;
			
			public event TestCaseResultsRowChangeEventHandler TestCaseResultsRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddTestCaseResultsRow(TestCaseResultsRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsRow AddTestCaseResultsRow(RunsRow parentRunsRowByFK_TestCaseResults_Runs, TestCasesRow parentTestCasesRowByFK_TestCaseResults_TestCases, System.DateTime TimeStarted, System.DateTime TimeEnded, int Status, string Errors, string Warnings) {
				TestCaseResultsRow rowTestCaseResultsRow = ((TestCaseResultsRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						null,
						null,
						null,
						TimeStarted,
						TimeEnded,
						Status,
						Errors,
						Warnings};
				if ((parentRunsRowByFK_TestCaseResults_Runs != null)) {
					columnValuesArray[1] = parentRunsRowByFK_TestCaseResults_Runs[0];
				}
				if ((parentTestCasesRowByFK_TestCaseResults_TestCases != null)) {
					columnValuesArray[2] = parentTestCasesRowByFK_TestCaseResults_TestCases[0];
				}
				rowTestCaseResultsRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowTestCaseResultsRow);
				return rowTestCaseResultsRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsRow FindByID(int ID) {
				return ((TestCaseResultsRow)(this.Rows.Find(new object[] {
							ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				TestCaseResultsDataTable cln = ((TestCaseResultsDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new TestCaseResultsDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnID = base.Columns["ID"];
				this.columnRunID = base.Columns["RunID"];
				this.columnTestCaseID = base.Columns["TestCaseID"];
				this.columnTimeStarted = base.Columns["TimeStarted"];
				this.columnTimeEnded = base.Columns["TimeEnded"];
				this.columnStatus = base.Columns["Status"];
				this.columnErrors = base.Columns["Errors"];
				this.columnWarnings = base.Columns["Warnings"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnRunID = new global::System.Data.DataColumn("RunID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnRunID);
				this.columnTestCaseID = new global::System.Data.DataColumn("TestCaseID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnTestCaseID);
				this.columnTimeStarted = new global::System.Data.DataColumn("TimeStarted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnTimeStarted);
				this.columnTimeEnded = new global::System.Data.DataColumn("TimeEnded", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnTimeEnded);
				this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnStatus);
				this.columnErrors = new global::System.Data.DataColumn("Errors", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnErrors);
				this.columnWarnings = new global::System.Data.DataColumn("Warnings", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnWarnings);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
								this.columnID}, true));
				this.columnID.AutoIncrement = true;
				this.columnID.AllowDBNull = false;
				this.columnID.ReadOnly = true;
				this.columnID.Unique = true;
				this.columnRunID.AllowDBNull = false;
				this.columnTestCaseID.AllowDBNull = false;
				this.columnErrors.MaxLength = 2147483647;
				this.columnWarnings.MaxLength = 2147483647;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsRow NewTestCaseResultsRow() {
				return ((TestCaseResultsRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new TestCaseResultsRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(TestCaseResultsRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.TestCaseResultsRowChanged != null)) {
					this.TestCaseResultsRowChanged(this, new TestCaseResultsRowChangeEvent(((TestCaseResultsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.TestCaseResultsRowChanging != null)) {
					this.TestCaseResultsRowChanging(this, new TestCaseResultsRowChangeEvent(((TestCaseResultsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.TestCaseResultsRowDeleted != null)) {
					this.TestCaseResultsRowDeleted(this, new TestCaseResultsRowChangeEvent(((TestCaseResultsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.TestCaseResultsRowDeleting != null)) {
					this.TestCaseResultsRowDeleting(this, new TestCaseResultsRowChangeEvent(((TestCaseResultsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveTestCaseResultsRow(TestCaseResultsRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				AutomationDataSet ds = new AutomationDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "TestCaseResultsDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class ScehdulerDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnIP;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnSceName;
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnUserID;
			
			private global::System.Data.DataColumn columnStartTime;
			
			private global::System.Data.DataColumn columnEndTime;
			
			private global::System.Data.DataColumn columnAgentID;
			
			private global::System.Data.DataColumn columnSceID;
			
			private global::System.Data.DataColumn columnStatus;
			
			private global::System.Data.DataColumn columnLogFilename;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsDataTable() {
				this.TableName = "ScehdulerDetails";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal ScehdulerDetailsDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected ScehdulerDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IPColumn {
				get {
					return this.columnIP;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn NameColumn {
				get {
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn SceNameColumn {
				get {
					return this.columnSceName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn UserIDColumn {
				get {
					return this.columnUserID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn StartTimeColumn {
				get {
					return this.columnStartTime;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn EndTimeColumn {
				get {
					return this.columnEndTime;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn AgentIDColumn {
				get {
					return this.columnAgentID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn SceIDColumn {
				get {
					return this.columnSceID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn StatusColumn {
				get {
					return this.columnStatus;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn LogFilenameColumn {
				get {
					return this.columnLogFilename;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsRow this[int index] {
				get {
					return ((ScehdulerDetailsRow)(this.Rows[index]));
				}
			}
			
			public event ScehdulerDetailsRowChangeEventHandler ScehdulerDetailsRowChanging;
			
			public event ScehdulerDetailsRowChangeEventHandler ScehdulerDetailsRowChanged;
			
			public event ScehdulerDetailsRowChangeEventHandler ScehdulerDetailsRowDeleting;
			
			public event ScehdulerDetailsRowChangeEventHandler ScehdulerDetailsRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddScehdulerDetailsRow(ScehdulerDetailsRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsRow AddScehdulerDetailsRow(string IP, string Name, string SceName, int UserID, System.DateTime StartTime, System.DateTime EndTime, int Status, string LogFilename) {
				ScehdulerDetailsRow rowScehdulerDetailsRow = ((ScehdulerDetailsRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						IP,
						Name,
						SceName,
						null,
						UserID,
						StartTime,
						EndTime,
						null,
						null,
						Status,
						LogFilename};
				rowScehdulerDetailsRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowScehdulerDetailsRow);
				return rowScehdulerDetailsRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsRow FindByID(int ID) {
				return ((ScehdulerDetailsRow)(this.Rows.Find(new object[] {
							ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				ScehdulerDetailsDataTable cln = ((ScehdulerDetailsDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new ScehdulerDetailsDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnIP = base.Columns["IP"];
				this.columnName = base.Columns["Name"];
				this.columnSceName = base.Columns["SceName"];
				this.columnID = base.Columns["ID"];
				this.columnUserID = base.Columns["UserID"];
				this.columnStartTime = base.Columns["StartTime"];
				this.columnEndTime = base.Columns["EndTime"];
				this.columnAgentID = base.Columns["AgentID"];
				this.columnSceID = base.Columns["SceID"];
				this.columnStatus = base.Columns["Status"];
				this.columnLogFilename = base.Columns["LogFilename"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnIP = new global::System.Data.DataColumn("IP", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnIP);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnSceName = new global::System.Data.DataColumn("SceName", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnSceName);
				this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUserID);
				this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnStartTime);
				this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnEndTime);
				this.columnAgentID = new global::System.Data.DataColumn("AgentID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnAgentID);
				this.columnSceID = new global::System.Data.DataColumn("SceID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnSceID);
				this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnStatus);
				this.columnLogFilename = new global::System.Data.DataColumn("LogFilename", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnLogFilename);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
								this.columnID}, true));
				this.columnIP.MaxLength = 20;
				this.columnName.MaxLength = 50;
				this.columnSceName.AllowDBNull = false;
				this.columnSceName.MaxLength = 200;
				this.columnID.AutoIncrement = true;
				this.columnID.AutoIncrementSeed = -1;
				this.columnID.AutoIncrementStep = -1;
				this.columnID.AllowDBNull = false;
				this.columnID.ReadOnly = true;
				this.columnID.Unique = true;
				this.columnAgentID.AutoIncrement = true;
				this.columnAgentID.AutoIncrementSeed = -1;
				this.columnAgentID.AutoIncrementStep = -1;
				this.columnAgentID.AllowDBNull = false;
				this.columnAgentID.ReadOnly = true;
				this.columnSceID.AutoIncrement = true;
				this.columnSceID.AutoIncrementSeed = -1;
				this.columnSceID.AutoIncrementStep = -1;
				this.columnSceID.AllowDBNull = false;
				this.columnSceID.ReadOnly = true;
				this.columnLogFilename.MaxLength = 2147483647;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsRow NewScehdulerDetailsRow() {
				return ((ScehdulerDetailsRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new ScehdulerDetailsRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(ScehdulerDetailsRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ScehdulerDetailsRowChanged != null)) {
					this.ScehdulerDetailsRowChanged(this, new ScehdulerDetailsRowChangeEvent(((ScehdulerDetailsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ScehdulerDetailsRowChanging != null)) {
					this.ScehdulerDetailsRowChanging(this, new ScehdulerDetailsRowChangeEvent(((ScehdulerDetailsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ScehdulerDetailsRowDeleted != null)) {
					this.ScehdulerDetailsRowDeleted(this, new ScehdulerDetailsRowChangeEvent(((ScehdulerDetailsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ScehdulerDetailsRowDeleting != null)) {
					this.ScehdulerDetailsRowDeleting(this, new ScehdulerDetailsRowChangeEvent(((ScehdulerDetailsRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveScehdulerDetailsRow(ScehdulerDetailsRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				AutomationDataSet ds = new AutomationDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "ScehdulerDetailsDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class AgentsRow : global::System.Data.DataRow {
			
			private AgentsDataTable tableAgents;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal AgentsRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableAgents = ((AgentsDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ID {
				get {
					return ((int)(this[this.tableAgents.IDColumn]));
				}
				set {
					this[this.tableAgents.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string IP {
				get {
					try {
						return ((string)(this[this.tableAgents.IPColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'IP\' in table \'Agents\' is DBNull.", e);
					}
				}
				set {
					this[this.tableAgents.IPColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Name {
				get {
					try {
						return ((string)(this[this.tableAgents.NameColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Agents\' is DBNull.", e);
					}
				}
				set {
					this[this.tableAgents.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string CPU {
				get {
					try {
						return ((string)(this[this.tableAgents.CPUColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'CPU\' in table \'Agents\' is DBNull.", e);
					}
				}
				set {
					this[this.tableAgents.CPUColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int Memory {
				get {
					try {
						return ((int)(this[this.tableAgents.MemoryColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Memory\' in table \'Agents\' is DBNull.", e);
					}
				}
				set {
					this[this.tableAgents.MemoryColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Model {
				get {
					try {
						return ((string)(this[this.tableAgents.ModelColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Model\' in table \'Agents\' is DBNull.", e);
					}
				}
				set {
					this[this.tableAgents.ModelColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string OS {
				get {
					try {
						return ((string)(this[this.tableAgents.OSColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'OS\' in table \'Agents\' is DBNull.", e);
					}
				}
				set {
					this[this.tableAgents.OSColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int Status {
				get {
					try {
						return ((int)(this[this.tableAgents.StatusColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'Agents\' is DBNull.", e);
					}
				}
				set {
					this[this.tableAgents.StatusColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsIPNull() {
				return this.IsNull(this.tableAgents.IPColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetIPNull() {
				this[this.tableAgents.IPColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsNameNull() {
				return this.IsNull(this.tableAgents.NameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetNameNull() {
				this[this.tableAgents.NameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsCPUNull() {
				return this.IsNull(this.tableAgents.CPUColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetCPUNull() {
				this[this.tableAgents.CPUColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsMemoryNull() {
				return this.IsNull(this.tableAgents.MemoryColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetMemoryNull() {
				this[this.tableAgents.MemoryColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsModelNull() {
				return this.IsNull(this.tableAgents.ModelColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetModelNull() {
				this[this.tableAgents.ModelColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsOSNull() {
				return this.IsNull(this.tableAgents.OSColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetOSNull() {
				this[this.tableAgents.OSColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsStatusNull() {
				return this.IsNull(this.tableAgents.StatusColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetStatusNull() {
				this[this.tableAgents.StatusColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow[] GetRunsRows() {
				if ((this.Table.ChildRelations["FK_Runs_Agents"] == null)) {
					return new RunsRow[0];
				}
				else {
					return ((RunsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Runs_Agents"])));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow[] GetSchedulesRows() {
				if ((this.Table.ChildRelations["FK_Schedules_Agents"] == null)) {
					return new SchedulesRow[0];
				}
				else {
					return ((SchedulesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Schedules_Agents"])));
				}
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class TestCasesRow : global::System.Data.DataRow {
			
			private TestCasesDataTable tableTestCases;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal TestCasesRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableTestCases = ((TestCasesDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ID {
				get {
					return ((int)(this[this.tableTestCases.IDColumn]));
				}
				set {
					this[this.tableTestCases.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Name {
				get {
					try {
						return ((string)(this[this.tableTestCases.NameColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'TestCases\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCases.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Description {
				get {
					try {
						return ((string)(this[this.tableTestCases.DescriptionColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'TestCases\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCases.DescriptionColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string HelpURL {
				get {
					try {
						return ((string)(this[this.tableTestCases.HelpURLColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'HelpURL\' in table \'TestCases\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCases.HelpURLColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string DefinedInDLL {
				get {
					try {
						return ((string)(this[this.tableTestCases.DefinedInDLLColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'DefinedInDLL\' in table \'TestCases\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCases.DefinedInDLLColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsNameNull() {
				return this.IsNull(this.tableTestCases.NameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetNameNull() {
				this[this.tableTestCases.NameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsDescriptionNull() {
				return this.IsNull(this.tableTestCases.DescriptionColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetDescriptionNull() {
				this[this.tableTestCases.DescriptionColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsHelpURLNull() {
				return this.IsNull(this.tableTestCases.HelpURLColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetHelpURLNull() {
				this[this.tableTestCases.HelpURLColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsDefinedInDLLNull() {
				return this.IsNull(this.tableTestCases.DefinedInDLLColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetDefinedInDLLNull() {
				this[this.tableTestCases.DefinedInDLLColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsRow[] GetTestCaseResultsRows() {
				if ((this.Table.ChildRelations["FK_TestCaseResults_TestCases"] == null)) {
					return new TestCaseResultsRow[0];
				}
				else {
					return ((TestCaseResultsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TestCaseResults_TestCases"])));
				}
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class ApplicationsRow : global::System.Data.DataRow {
			
			private ApplicationsDataTable tableApplications;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal ApplicationsRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableApplications = ((ApplicationsDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ID {
				get {
					return ((int)(this[this.tableApplications.IDColumn]));
				}
				set {
					this[this.tableApplications.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Product {
				get {
					try {
						return ((string)(this[this.tableApplications.ProductColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Product\' in table \'Applications\' is DBNull.", e);
					}
				}
				set {
					this[this.tableApplications.ProductColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Project {
				get {
					try {
						return ((string)(this[this.tableApplications.ProjectColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'Applications\' is DBNull.", e);
					}
				}
				set {
					this[this.tableApplications.ProjectColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string SWVersion {
				get {
					try {
						return ((string)(this[this.tableApplications.SWVersionColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'SWVersion\' in table \'Applications\' is DBNull.", e);
					}
				}
				set {
					this[this.tableApplications.SWVersionColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string OtherVersions {
				get {
					try {
						return ((string)(this[this.tableApplications.OtherVersionsColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'OtherVersions\' in table \'Applications\' is DBNull.", e);
					}
				}
				set {
					this[this.tableApplications.OtherVersionsColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsProductNull() {
				return this.IsNull(this.tableApplications.ProductColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetProductNull() {
				this[this.tableApplications.ProductColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsProjectNull() {
				return this.IsNull(this.tableApplications.ProjectColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetProjectNull() {
				this[this.tableApplications.ProjectColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsSWVersionNull() {
				return this.IsNull(this.tableApplications.SWVersionColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetSWVersionNull() {
				this[this.tableApplications.SWVersionColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsOtherVersionsNull() {
				return this.IsNull(this.tableApplications.OtherVersionsColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetOtherVersionsNull() {
				this[this.tableApplications.OtherVersionsColumn] = global::System.Convert.DBNull;
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class RunsRow : global::System.Data.DataRow {
			
			private RunsDataTable tableRuns;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal RunsRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableRuns = ((RunsDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ID {
				get {
					return ((int)(this[this.tableRuns.IDColumn]));
				}
				set {
					this[this.tableRuns.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ScheduleID {
				get {
					try {
						return ((int)(this[this.tableRuns.ScheduleIDColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'ScheduleID\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.ScheduleIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ScenarioID {
				get {
					try {
						return ((int)(this[this.tableRuns.ScenarioIDColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'ScenarioID\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.ScenarioIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int AgentID {
				get {
					try {
						return ((int)(this[this.tableRuns.AgentIDColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'AgentID\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.AgentIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime StartTime {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableRuns.StartTimeColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.StartTimeColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime EndTime {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableRuns.EndTimeColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.EndTimeColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string LogFilename {
				get {
					try {
						return ((string)(this[this.tableRuns.LogFilenameColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'LogFilename\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.LogFilenameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int Status {
				get {
					try {
						return ((int)(this[this.tableRuns.StatusColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.StatusColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public double PercentsPassed {
				get {
					try {
						return ((double)(this[this.tableRuns.PercentsPassedColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'PercentsPassed\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.PercentsPassedColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public double PercentsSkipped {
				get {
					try {
						return ((double)(this[this.tableRuns.PercentsSkippedColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'PercentsSkipped\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.PercentsSkippedColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public double PercentsFailed {
				get {
					try {
						return ((double)(this[this.tableRuns.PercentsFailedColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'PercentsFailed\' in table \'Runs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableRuns.PercentsFailedColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsRow AgentsRow {
				get {
					return ((AgentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Runs_Agents"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_Runs_Agents"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosRow ScenariosRow {
				get {
					return ((ScenariosRow)(this.GetParentRow(this.Table.ParentRelations["FK_Runs_Scenarios"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_Runs_Scenarios"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow SchedulesRow {
				get {
					return ((SchedulesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Runs_Schedules"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_Runs_Schedules"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsRow ScehdulerDetailsRow {
				get {
					return ((ScehdulerDetailsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Runs_Agents1"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_Runs_Agents1"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsScheduleIDNull() {
				return this.IsNull(this.tableRuns.ScheduleIDColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetScheduleIDNull() {
				this[this.tableRuns.ScheduleIDColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsScenarioIDNull() {
				return this.IsNull(this.tableRuns.ScenarioIDColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetScenarioIDNull() {
				this[this.tableRuns.ScenarioIDColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsAgentIDNull() {
				return this.IsNull(this.tableRuns.AgentIDColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetAgentIDNull() {
				this[this.tableRuns.AgentIDColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsStartTimeNull() {
				return this.IsNull(this.tableRuns.StartTimeColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetStartTimeNull() {
				this[this.tableRuns.StartTimeColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsEndTimeNull() {
				return this.IsNull(this.tableRuns.EndTimeColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetEndTimeNull() {
				this[this.tableRuns.EndTimeColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsLogFilenameNull() {
				return this.IsNull(this.tableRuns.LogFilenameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetLogFilenameNull() {
				this[this.tableRuns.LogFilenameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsStatusNull() {
				return this.IsNull(this.tableRuns.StatusColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetStatusNull() {
				this[this.tableRuns.StatusColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsPercentsPassedNull() {
				return this.IsNull(this.tableRuns.PercentsPassedColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetPercentsPassedNull() {
				this[this.tableRuns.PercentsPassedColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsPercentsSkippedNull() {
				return this.IsNull(this.tableRuns.PercentsSkippedColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetPercentsSkippedNull() {
				this[this.tableRuns.PercentsSkippedColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsPercentsFailedNull() {
				return this.IsNull(this.tableRuns.PercentsFailedColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetPercentsFailedNull() {
				this[this.tableRuns.PercentsFailedColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsRow[] GetTestCaseResultsRows() {
				if ((this.Table.ChildRelations["FK_TestCaseResults_Runs"] == null)) {
					return new TestCaseResultsRow[0];
				}
				else {
					return ((TestCaseResultsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TestCaseResults_Runs"])));
				}
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class ScenariosRow : global::System.Data.DataRow {
			
			private ScenariosDataTable tableScenarios;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal ScenariosRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableScenarios = ((ScenariosDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ID {
				get {
					return ((int)(this[this.tableScenarios.IDColumn]));
				}
				set {
					this[this.tableScenarios.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Name {
				get {
					return ((string)(this[this.tableScenarios.NameColumn]));
				}
				set {
					this[this.tableScenarios.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Description {
				get {
					if (this.IsDescriptionNull()) {
						return string.Empty;
					}
					else {
						return ((string)(this[this.tableScenarios.DescriptionColumn]));
					}
				}
				set {
					this[this.tableScenarios.DescriptionColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Filename {
				get {
					return ((string)(this[this.tableScenarios.FilenameColumn]));
				}
				set {
					this[this.tableScenarios.FilenameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Attachments {
				get {
					if (this.IsAttachmentsNull()) {
						return string.Empty;
					}
					else {
						return ((string)(this[this.tableScenarios.AttachmentsColumn]));
					}
				}
				set {
					this[this.tableScenarios.AttachmentsColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime LastModified {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableScenarios.LastModifiedColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'LastModified\' in table \'Scenarios\' is DBNull.", e);
					}
				}
				set {
					this[this.tableScenarios.LastModifiedColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsDescriptionNull() {
				return this.IsNull(this.tableScenarios.DescriptionColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetDescriptionNull() {
				this[this.tableScenarios.DescriptionColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsAttachmentsNull() {
				return this.IsNull(this.tableScenarios.AttachmentsColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetAttachmentsNull() {
				this[this.tableScenarios.AttachmentsColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsLastModifiedNull() {
				return this.IsNull(this.tableScenarios.LastModifiedColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetLastModifiedNull() {
				this[this.tableScenarios.LastModifiedColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow[] GetRunsRows() {
				if ((this.Table.ChildRelations["FK_Runs_Scenarios"] == null)) {
					return new RunsRow[0];
				}
				else {
					return ((RunsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Runs_Scenarios"])));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow[] GetSchedulesRows() {
				if ((this.Table.ChildRelations["FK_Schedules_Scenarios"] == null)) {
					return new SchedulesRow[0];
				}
				else {
					return ((SchedulesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Schedules_Scenarios"])));
				}
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class SchedulesRow : global::System.Data.DataRow {
			
			private SchedulesDataTable tableSchedules;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal SchedulesRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableSchedules = ((SchedulesDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ID {
				get {
					return ((int)(this[this.tableSchedules.IDColumn]));
				}
				set {
					this[this.tableSchedules.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int AgentID {
				get {
					return ((int)(this[this.tableSchedules.AgentIDColumn]));
				}
				set {
					this[this.tableSchedules.AgentIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ScenarioID {
				get {
					return ((int)(this[this.tableSchedules.ScenarioIDColumn]));
				}
				set {
					this[this.tableSchedules.ScenarioIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int UserID {
				get {
					try {
						return ((int)(this[this.tableSchedules.UserIDColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'Schedules\' is DBNull.", e);
					}
				}
				set {
					this[this.tableSchedules.UserIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime StartTime {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableSchedules.StartTimeColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'Schedules\' is DBNull.", e);
					}
				}
				set {
					this[this.tableSchedules.StartTimeColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime EndTime {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableSchedules.EndTimeColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'Schedules\' is DBNull.", e);
					}
				}
				set {
					this[this.tableSchedules.EndTimeColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsRow AgentsRow {
				get {
					return ((AgentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Schedules_Agents"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_Schedules_Agents"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosRow ScenariosRow {
				get {
					return ((ScenariosRow)(this.GetParentRow(this.Table.ParentRelations["FK_Schedules_Scenarios"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_Schedules_Scenarios"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsRow ScehdulerDetailsRow {
				get {
					return ((ScehdulerDetailsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Schedules_Agents1"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_Schedules_Agents1"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsUserIDNull() {
				return this.IsNull(this.tableSchedules.UserIDColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetUserIDNull() {
				this[this.tableSchedules.UserIDColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsStartTimeNull() {
				return this.IsNull(this.tableSchedules.StartTimeColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetStartTimeNull() {
				this[this.tableSchedules.StartTimeColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsEndTimeNull() {
				return this.IsNull(this.tableSchedules.EndTimeColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetEndTimeNull() {
				this[this.tableSchedules.EndTimeColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow[] GetRunsRows() {
				if ((this.Table.ChildRelations["FK_Runs_Schedules"] == null)) {
					return new RunsRow[0];
				}
				else {
					return ((RunsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Runs_Schedules"])));
				}
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class TestCaseResultsRow : global::System.Data.DataRow {
			
			private TestCaseResultsDataTable tableTestCaseResults;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal TestCaseResultsRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableTestCaseResults = ((TestCaseResultsDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ID {
				get {
					return ((int)(this[this.tableTestCaseResults.IDColumn]));
				}
				set {
					this[this.tableTestCaseResults.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int RunID {
				get {
					return ((int)(this[this.tableTestCaseResults.RunIDColumn]));
				}
				set {
					this[this.tableTestCaseResults.RunIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int TestCaseID {
				get {
					return ((int)(this[this.tableTestCaseResults.TestCaseIDColumn]));
				}
				set {
					this[this.tableTestCaseResults.TestCaseIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime TimeStarted {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableTestCaseResults.TimeStartedColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'TimeStarted\' in table \'TestCaseResults\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCaseResults.TimeStartedColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime TimeEnded {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableTestCaseResults.TimeEndedColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'TimeEnded\' in table \'TestCaseResults\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCaseResults.TimeEndedColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int Status {
				get {
					try {
						return ((int)(this[this.tableTestCaseResults.StatusColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'TestCaseResults\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCaseResults.StatusColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Errors {
				get {
					try {
						return ((string)(this[this.tableTestCaseResults.ErrorsColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Errors\' in table \'TestCaseResults\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCaseResults.ErrorsColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Warnings {
				get {
					try {
						return ((string)(this[this.tableTestCaseResults.WarningsColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Warnings\' in table \'TestCaseResults\' is DBNull.", e);
					}
				}
				set {
					this[this.tableTestCaseResults.WarningsColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow RunsRow {
				get {
					return ((RunsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TestCaseResults_Runs"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_TestCaseResults_Runs"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCasesRow TestCasesRow {
				get {
					return ((TestCasesRow)(this.GetParentRow(this.Table.ParentRelations["FK_TestCaseResults_TestCases"])));
				}
				set {
					this.SetParentRow(value, this.Table.ParentRelations["FK_TestCaseResults_TestCases"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsTimeStartedNull() {
				return this.IsNull(this.tableTestCaseResults.TimeStartedColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetTimeStartedNull() {
				this[this.tableTestCaseResults.TimeStartedColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsTimeEndedNull() {
				return this.IsNull(this.tableTestCaseResults.TimeEndedColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetTimeEndedNull() {
				this[this.tableTestCaseResults.TimeEndedColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsStatusNull() {
				return this.IsNull(this.tableTestCaseResults.StatusColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetStatusNull() {
				this[this.tableTestCaseResults.StatusColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsErrorsNull() {
				return this.IsNull(this.tableTestCaseResults.ErrorsColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetErrorsNull() {
				this[this.tableTestCaseResults.ErrorsColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsWarningsNull() {
				return this.IsNull(this.tableTestCaseResults.WarningsColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetWarningsNull() {
				this[this.tableTestCaseResults.WarningsColumn] = global::System.Convert.DBNull;
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class ScehdulerDetailsRow : global::System.Data.DataRow {
			
			private ScehdulerDetailsDataTable tableScehdulerDetails;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal ScehdulerDetailsRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableScehdulerDetails = ((ScehdulerDetailsDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string IP {
				get {
					try {
						return ((string)(this[this.tableScehdulerDetails.IPColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'IP\' in table \'ScehdulerDetails\' is DBNull.", e);
					}
				}
				set {
					this[this.tableScehdulerDetails.IPColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Name {
				get {
					try {
						return ((string)(this[this.tableScehdulerDetails.NameColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ScehdulerDetails\' is DBNull.", e);
					}
				}
				set {
					this[this.tableScehdulerDetails.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string SceName {
				get {
					return ((string)(this[this.tableScehdulerDetails.SceNameColumn]));
				}
				set {
					this[this.tableScehdulerDetails.SceNameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int ID {
				get {
					return ((int)(this[this.tableScehdulerDetails.IDColumn]));
				}
				set {
					this[this.tableScehdulerDetails.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int UserID {
				get {
					try {
						return ((int)(this[this.tableScehdulerDetails.UserIDColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'ScehdulerDetails\' is DBNull.", e);
					}
				}
				set {
					this[this.tableScehdulerDetails.UserIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime StartTime {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableScehdulerDetails.StartTimeColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'ScehdulerDetails\' is DBNull.", e);
					}
				}
				set {
					this[this.tableScehdulerDetails.StartTimeColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.DateTime EndTime {
				get {
					try {
						return ((global::System.DateTime)(this[this.tableScehdulerDetails.EndTimeColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'ScehdulerDetails\' is DBNull.", e);
					}
				}
				set {
					this[this.tableScehdulerDetails.EndTimeColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int AgentID {
				get {
					return ((int)(this[this.tableScehdulerDetails.AgentIDColumn]));
				}
				set {
					this[this.tableScehdulerDetails.AgentIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int SceID {
				get {
					return ((int)(this[this.tableScehdulerDetails.SceIDColumn]));
				}
				set {
					this[this.tableScehdulerDetails.SceIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int Status {
				get {
					try {
						return ((int)(this[this.tableScehdulerDetails.StatusColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ScehdulerDetails\' is DBNull.", e);
					}
				}
				set {
					this[this.tableScehdulerDetails.StatusColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string LogFilename {
				get {
					try {
						return ((string)(this[this.tableScehdulerDetails.LogFilenameColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'LogFilename\' in table \'ScehdulerDetails\' is DBNull.", e);
					}
				}
				set {
					this[this.tableScehdulerDetails.LogFilenameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsIPNull() {
				return this.IsNull(this.tableScehdulerDetails.IPColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetIPNull() {
				this[this.tableScehdulerDetails.IPColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsNameNull() {
				return this.IsNull(this.tableScehdulerDetails.NameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetNameNull() {
				this[this.tableScehdulerDetails.NameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsUserIDNull() {
				return this.IsNull(this.tableScehdulerDetails.UserIDColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetUserIDNull() {
				this[this.tableScehdulerDetails.UserIDColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsStartTimeNull() {
				return this.IsNull(this.tableScehdulerDetails.StartTimeColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetStartTimeNull() {
				this[this.tableScehdulerDetails.StartTimeColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsEndTimeNull() {
				return this.IsNull(this.tableScehdulerDetails.EndTimeColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetEndTimeNull() {
				this[this.tableScehdulerDetails.EndTimeColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsStatusNull() {
				return this.IsNull(this.tableScehdulerDetails.StatusColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetStatusNull() {
				this[this.tableScehdulerDetails.StatusColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsLogFilenameNull() {
				return this.IsNull(this.tableScehdulerDetails.LogFilenameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetLogFilenameNull() {
				this[this.tableScehdulerDetails.LogFilenameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow[] GetRunsRows() {
				if ((this.Table.ChildRelations["FK_Runs_Agents1"] == null)) {
					return new RunsRow[0];
				}
				else {
					return ((RunsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Runs_Agents1"])));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow[] GetSchedulesRows() {
				if ((this.Table.ChildRelations["FK_Schedules_Agents1"] == null)) {
					return new SchedulesRow[0];
				}
				else {
					return ((SchedulesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Schedules_Agents1"])));
				}
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class AgentsRowChangeEvent : global::System.EventArgs {
			
			private AgentsRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsRowChangeEvent(AgentsRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AgentsRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class TestCasesRowChangeEvent : global::System.EventArgs {
			
			private TestCasesRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCasesRowChangeEvent(TestCasesRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCasesRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class ApplicationsRowChangeEvent : global::System.EventArgs {
			
			private ApplicationsRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ApplicationsRowChangeEvent(ApplicationsRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ApplicationsRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class RunsRowChangeEvent : global::System.EventArgs {
			
			private RunsRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRowChangeEvent(RunsRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public RunsRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class ScenariosRowChangeEvent : global::System.EventArgs {
			
			private ScenariosRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosRowChangeEvent(ScenariosRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScenariosRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class SchedulesRowChangeEvent : global::System.EventArgs {
			
			private SchedulesRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRowChangeEvent(SchedulesRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SchedulesRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class TestCaseResultsRowChangeEvent : global::System.EventArgs {
			
			private TestCaseResultsRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsRowChangeEvent(TestCaseResultsRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TestCaseResultsRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class ScehdulerDetailsRowChangeEvent : global::System.EventArgs {
			
			private ScehdulerDetailsRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsRowChangeEvent(ScehdulerDetailsRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ScehdulerDetailsRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
	}
}
namespace QAliber.DAL.AutomationDataSetTableAdapters {
	
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class AgentsTableAdapter : global::System.ComponentModel.Component {
		
		private global::System.Data.SqlClient.SqlDataAdapter _adapter;
		
		private global::System.Data.SqlClient.SqlConnection _connection;
		
		private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
		
		private bool _clearBeforeFill;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public AgentsTableAdapter() {
			this.ClearBeforeFill = true;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private global::System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal global::System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "Agents";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("IP", "IP");
			tableMapping.ColumnMappings.Add("Name", "Name");
			tableMapping.ColumnMappings.Add("CPU", "CPU");
			tableMapping.ColumnMappings.Add("Memory", "Memory");
			tableMapping.ColumnMappings.Add("Model", "Model");
			tableMapping.ColumnMappings.Add("OS", "OS");
			tableMapping.ColumnMappings.Add("Status", "Status");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Agents] WHERE (([ID] = @Original_ID) AND ((@IsNull_IP = 1 AND [IP] IS NULL) OR ([IP] = @Original_IP)) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ((@IsNull_CPU = 1 AND [CPU] IS NULL) OR ([CPU] = @Original_CPU)) AND ((@IsNull_Memory = 1 AND [Memory] IS NULL) OR ([Memory] = @Original_Memory)) AND ((@IsNull_Model = 1 AND [Model] IS NULL) OR ([Model] = @Original_Model)) AND ((@IsNull_OS = 1 AND [OS] IS NULL) OR ([OS] = @Original_OS)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Status)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CPU", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CPU", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CPU", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CPU", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Memory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Memory", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Memory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Memory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Model", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Model", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Agents] ([IP], [Name], [CPU], [Memory], [Model], [OS], [Status" +
				"]) VALUES (@IP, @Name, @CPU, @Memory, @Model, @OS, @Status);\r\nSELECT ID, IP, Nam" +
				"e, CPU, Memory, Model, OS, Status FROM Agents WHERE (ID = SCOPE_IDENTITY())";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CPU", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CPU", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Memory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Memory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Model", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Agents] SET [IP] = @IP, [Name] = @Name, [CPU] = @CPU, [Memory] = @Memory, [Model] = @Model, [OS] = @OS, [Status] = @Status WHERE (([ID] = @Original_ID) AND ((@IsNull_IP = 1 AND [IP] IS NULL) OR ([IP] = @Original_IP)) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ((@IsNull_CPU = 1 AND [CPU] IS NULL) OR ([CPU] = @Original_CPU)) AND ((@IsNull_Memory = 1 AND [Memory] IS NULL) OR ([Memory] = @Original_Memory)) AND ((@IsNull_Model = 1 AND [Model] IS NULL) OR ([Model] = @Original_Model)) AND ((@IsNull_OS = 1 AND [OS] IS NULL) OR ([OS] = @Original_OS)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Status)));
SELECT ID, IP, Name, CPU, Memory, Model, OS, Status FROM Agents WHERE (ID = @ID)";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CPU", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CPU", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Memory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Memory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Model", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CPU", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CPU", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CPU", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CPU", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Memory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Memory", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Memory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Memory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Model", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Model", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, IP, Name, CPU, Memory, Model, OS, Status FROM dbo.Agents";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[1].Connection = this.Connection;
			this._commandCollection[1].CommandText = "DELETE FROM [dbo].[Agents] WHERE [ID] = @AgentID";
			this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgentID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(AutomationDataSet.AgentsDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual AutomationDataSet.AgentsDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			AutomationDataSet.AgentsDataTable dataTable = new AutomationDataSet.AgentsDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet.AgentsDataTable dataTable) {
			return this.Adapter.Update(dataTable);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet dataSet) {
			return this.Adapter.Update(dataSet, "Agents");
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow) {
			return this.Adapter.Update(new global::System.Data.DataRow[] {
						dataRow});
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows) {
			return this.Adapter.Update(dataRows);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_IP, string Original_Name, string Original_CPU, global::System.Nullable<int> Original_Memory, string Original_Model, string Original_OS, global::System.Nullable<int> Original_Status) {
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
			if ((Original_IP == null)) {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_IP));
			}
			if ((Original_Name == null)) {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Name));
			}
			if ((Original_CPU == null)) {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_CPU));
			}
			if ((Original_Memory.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Memory.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			if ((Original_Model == null)) {
				this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Model));
			}
			if ((Original_OS == null)) {
				this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_OS));
			}
			if ((Original_Status.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_Status.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(string IP, string Name, string CPU, global::System.Nullable<int> Memory, string Model, string OS, global::System.Nullable<int> Status) {
			if ((IP == null)) {
				this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[0].Value = ((string)(IP));
			}
			if ((Name == null)) {
				this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
			}
			if ((CPU == null)) {
				this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CPU));
			}
			if ((Memory.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Memory.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((Model == null)) {
				this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Model));
			}
			if ((OS == null)) {
				this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[5].Value = ((string)(OS));
			}
			if ((Status.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Status.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(
					string IP, 
					string Name, 
					string CPU, 
					global::System.Nullable<int> Memory, 
					string Model, 
					string OS, 
					global::System.Nullable<int> Status, 
					int Original_ID, 
					string Original_IP, 
					string Original_Name, 
					string Original_CPU, 
					global::System.Nullable<int> Original_Memory, 
					string Original_Model, 
					string Original_OS, 
					global::System.Nullable<int> Original_Status, 
					int ID) {
			if ((IP == null)) {
				this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(IP));
			}
			if ((Name == null)) {
				this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
			}
			if ((CPU == null)) {
				this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CPU));
			}
			if ((Memory.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Memory.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((Model == null)) {
				this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Model));
			}
			if ((OS == null)) {
				this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(OS));
			}
			if ((Status.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Status.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ID));
			if ((Original_IP == null)) {
				this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_IP));
			}
			if ((Original_Name == null)) {
				this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Name));
			}
			if ((Original_CPU == null)) {
				this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_CPU));
			}
			if ((Original_Memory.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_Memory.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
			}
			if ((Original_Model == null)) {
				this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_Model));
			}
			if ((Original_OS == null)) {
				this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_OS));
			}
			if ((Original_Status.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_Status.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
			}
			this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(ID));
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string IP, string Name, string CPU, global::System.Nullable<int> Memory, string Model, string OS, global::System.Nullable<int> Status, int Original_ID, string Original_IP, string Original_Name, string Original_CPU, global::System.Nullable<int> Original_Memory, string Original_Model, string Original_OS, global::System.Nullable<int> Original_Status) {
			return this.Update(IP, Name, CPU, Memory, Model, OS, Status, Original_ID, Original_IP, Original_Name, Original_CPU, Original_Memory, Original_Model, Original_OS, Original_Status, Original_ID);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
		public virtual int DeleteAgentByID(int AgentID) {
			global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
			command.Parameters[0].Value = ((int)(AgentID));
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
	}
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class TestCasesTableAdapter : global::System.ComponentModel.Component {
		
		private global::System.Data.SqlClient.SqlDataAdapter _adapter;
		
		private global::System.Data.SqlClient.SqlConnection _connection;
		
		private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
		
		private bool _clearBeforeFill;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public TestCasesTableAdapter() {
			this.ClearBeforeFill = true;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private global::System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal global::System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "TestCases";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("Name", "Name");
			tableMapping.ColumnMappings.Add("Description", "Description");
			tableMapping.ColumnMappings.Add("HelpURL", "HelpURL");
			tableMapping.ColumnMappings.Add("DefinedInDLL", "DefinedInDLL");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TestCases] WHERE (([ID] = @Original_ID) AND ((@IsNull_Name = 1" +
				" AND [Name] IS NULL) OR ([Name] = @Original_Name)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TestCases] ([Name], [Description], [HelpURL], [DefinedInDLL]) " +
				"VALUES (@Name, @Description, @HelpURL, @DefinedInDLL);\r\nSELECT ID, Name, Descrip" +
				"tion, HelpURL, DefinedInDLL FROM TestCases WHERE (ID = SCOPE_IDENTITY())";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HelpURL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HelpURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DefinedInDLL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DefinedInDLL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TestCases] SET [Name] = @Name, [Description] = @Description, [HelpURL] = @HelpURL, [DefinedInDLL] = @DefinedInDLL WHERE (([ID] = @Original_ID) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)));
SELECT ID, Name, Description, HelpURL, DefinedInDLL FROM TestCases WHERE (ID = @ID)";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HelpURL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HelpURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DefinedInDLL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DefinedInDLL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, Name, Description, HelpURL, DefinedInDLL FROM dbo.TestCases";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(AutomationDataSet.TestCasesDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual AutomationDataSet.TestCasesDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			AutomationDataSet.TestCasesDataTable dataTable = new AutomationDataSet.TestCasesDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet.TestCasesDataTable dataTable) {
			return this.Adapter.Update(dataTable);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet dataSet) {
			return this.Adapter.Update(dataSet, "TestCases");
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow) {
			return this.Adapter.Update(new global::System.Data.DataRow[] {
						dataRow});
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows) {
			return this.Adapter.Update(dataRows);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_Name) {
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
			if ((Original_Name == null)) {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Name));
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(string Name, string Description, string HelpURL, string DefinedInDLL) {
			if ((Name == null)) {
				this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
			}
			if ((Description == null)) {
				this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
			}
			if ((HelpURL == null)) {
				this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[2].Value = ((string)(HelpURL));
			}
			if ((DefinedInDLL == null)) {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DefinedInDLL));
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string Name, string Description, string HelpURL, string DefinedInDLL, int Original_ID, string Original_Name, int ID) {
			if ((Name == null)) {
				this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
			}
			if ((Description == null)) {
				this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
			}
			if ((HelpURL == null)) {
				this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(HelpURL));
			}
			if ((DefinedInDLL == null)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DefinedInDLL));
			}
			this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
			if ((Original_Name == null)) {
				this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Name));
			}
			this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ID));
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string Name, string Description, string HelpURL, string DefinedInDLL, int Original_ID, string Original_Name) {
			return this.Update(Name, Description, HelpURL, DefinedInDLL, Original_ID, Original_Name, Original_ID);
		}
	}
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class ApplicationsTableAdapter : global::System.ComponentModel.Component {
		
		private global::System.Data.SqlClient.SqlDataAdapter _adapter;
		
		private global::System.Data.SqlClient.SqlConnection _connection;
		
		private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
		
		private bool _clearBeforeFill;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public ApplicationsTableAdapter() {
			this.ClearBeforeFill = true;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private global::System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal global::System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "Applications";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("Product", "Product");
			tableMapping.ColumnMappings.Add("Project", "Project");
			tableMapping.ColumnMappings.Add("SWVersion", "SWVersion");
			tableMapping.ColumnMappings.Add("OtherVersions", "OtherVersions");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Applications] WHERE (([ID] = @Original_ID) AND ((@IsNull_Product = 1 AND [Product] IS NULL) OR ([Product] = @Original_Product)) AND ((@IsNull_Project = 1 AND [Project] IS NULL) OR ([Project] = @Original_Project)) AND ((@IsNull_SWVersion = 1 AND [SWVersion] IS NULL) OR ([SWVersion] = @Original_SWVersion)) AND ((@IsNull_OtherVersions = 1 AND [OtherVersions] IS NULL) OR ([OtherVersions] = @Original_OtherVersions)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Product", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Product", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Product", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Product", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Project", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Project", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SWVersion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SWVersion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SWVersion", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SWVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OtherVersions", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherVersions", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OtherVersions", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherVersions", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Applications] ([Product], [Project], [SWVersion], [OtherVersio" +
				"ns]) VALUES (@Product, @Project, @SWVersion, @OtherVersions);\r\nSELECT ID, Produc" +
				"t, Project, SWVersion, OtherVersions FROM Applications WHERE (ID = SCOPE_IDENTIT" +
				"Y())";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Product", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Product", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Project", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SWVersion", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SWVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherVersions", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherVersions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Applications] SET [Product] = @Product, [Project] = @Project, [SWVersion] = @SWVersion, [OtherVersions] = @OtherVersions WHERE (([ID] = @Original_ID) AND ((@IsNull_Product = 1 AND [Product] IS NULL) OR ([Product] = @Original_Product)) AND ((@IsNull_Project = 1 AND [Project] IS NULL) OR ([Project] = @Original_Project)) AND ((@IsNull_SWVersion = 1 AND [SWVersion] IS NULL) OR ([SWVersion] = @Original_SWVersion)) AND ((@IsNull_OtherVersions = 1 AND [OtherVersions] IS NULL) OR ([OtherVersions] = @Original_OtherVersions)));
SELECT ID, Product, Project, SWVersion, OtherVersions FROM Applications WHERE (ID = @ID)";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Product", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Product", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Project", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SWVersion", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SWVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherVersions", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherVersions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Product", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Product", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Product", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Product", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Project", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Project", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SWVersion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SWVersion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SWVersion", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SWVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OtherVersions", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherVersions", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OtherVersions", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherVersions", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, Product, Project, SWVersion, OtherVersions FROM dbo.Applications";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(AutomationDataSet.ApplicationsDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual AutomationDataSet.ApplicationsDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			AutomationDataSet.ApplicationsDataTable dataTable = new AutomationDataSet.ApplicationsDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet.ApplicationsDataTable dataTable) {
			return this.Adapter.Update(dataTable);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet dataSet) {
			return this.Adapter.Update(dataSet, "Applications");
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow) {
			return this.Adapter.Update(new global::System.Data.DataRow[] {
						dataRow});
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows) {
			return this.Adapter.Update(dataRows);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_Product, string Original_Project, string Original_SWVersion, string Original_OtherVersions) {
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
			if ((Original_Product == null)) {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Product));
			}
			if ((Original_Project == null)) {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Project));
			}
			if ((Original_SWVersion == null)) {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_SWVersion));
			}
			if ((Original_OtherVersions == null)) {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_OtherVersions));
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(string Product, string Project, string SWVersion, string OtherVersions) {
			if ((Product == null)) {
				this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Product));
			}
			if ((Project == null)) {
				this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Project));
			}
			if ((SWVersion == null)) {
				this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SWVersion));
			}
			if ((OtherVersions == null)) {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[3].Value = ((string)(OtherVersions));
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string Product, string Project, string SWVersion, string OtherVersions, int Original_ID, string Original_Product, string Original_Project, string Original_SWVersion, string Original_OtherVersions, int ID) {
			if ((Product == null)) {
				this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Product));
			}
			if ((Project == null)) {
				this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Project));
			}
			if ((SWVersion == null)) {
				this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SWVersion));
			}
			if ((OtherVersions == null)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(OtherVersions));
			}
			this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
			if ((Original_Product == null)) {
				this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Product));
			}
			if ((Original_Project == null)) {
				this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Project));
			}
			if ((Original_SWVersion == null)) {
				this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_SWVersion));
			}
			if ((Original_OtherVersions == null)) {
				this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_OtherVersions));
			}
			this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(ID));
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string Product, string Project, string SWVersion, string OtherVersions, int Original_ID, string Original_Product, string Original_Project, string Original_SWVersion, string Original_OtherVersions) {
			return this.Update(Product, Project, SWVersion, OtherVersions, Original_ID, Original_Product, Original_Project, Original_SWVersion, Original_OtherVersions, Original_ID);
		}
	}
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class RunsTableAdapter : global::System.ComponentModel.Component {
		
		private global::System.Data.SqlClient.SqlDataAdapter _adapter;
		
		private global::System.Data.SqlClient.SqlConnection _connection;
		
		private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
		
		private bool _clearBeforeFill;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public RunsTableAdapter() {
			this.ClearBeforeFill = true;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private global::System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal global::System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "Runs";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("ScheduleID", "ScheduleID");
			tableMapping.ColumnMappings.Add("ScenarioID", "ScenarioID");
			tableMapping.ColumnMappings.Add("AgentID", "AgentID");
			tableMapping.ColumnMappings.Add("StartTime", "StartTime");
			tableMapping.ColumnMappings.Add("EndTime", "EndTime");
			tableMapping.ColumnMappings.Add("LogFilename", "LogFilename");
			tableMapping.ColumnMappings.Add("Status", "Status");
			tableMapping.ColumnMappings.Add("PercentsPassed", "PercentsPassed");
			tableMapping.ColumnMappings.Add("PercentsSkipped", "PercentsSkipped");
			tableMapping.ColumnMappings.Add("PercentsFailed", "PercentsFailed");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Runs] WHERE (([ID] = @Original_ID) AND ((@IsNull_ScheduleID = 1 AND [ScheduleID] IS NULL) OR ([ScheduleID] = @Original_ScheduleID)) AND ((@IsNull_ScenarioID = 1 AND [ScenarioID] IS NULL) OR ([ScenarioID] = @Original_ScenarioID)) AND ((@IsNull_AgentID = 1 AND [AgentID] IS NULL) OR ([AgentID] = @Original_AgentID)) AND ((@IsNull_StartTime = 1 AND [StartTime] IS NULL) OR ([StartTime] = @Original_StartTime)) AND ((@IsNull_EndTime = 1 AND [EndTime] IS NULL) OR ([EndTime] = @Original_EndTime)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Status)) AND ((@IsNull_PercentsPassed = 1 AND [PercentsPassed] IS NULL) OR ([PercentsPassed] = @Original_PercentsPassed)) AND ((@IsNull_PercentsSkipped = 1 AND [PercentsSkipped] IS NULL) OR ([PercentsSkipped] = @Original_PercentsSkipped)) AND ((@IsNull_PercentsFailed = 1 AND [PercentsFailed] IS NULL) OR ([PercentsFailed] = @Original_PercentsFailed)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ScheduleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScheduleID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScheduleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScheduleID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PercentsPassed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsPassed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PercentsPassed", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsPassed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PercentsSkipped", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsSkipped", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PercentsSkipped", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsSkipped", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PercentsFailed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsFailed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PercentsFailed", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsFailed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Runs] ([ScheduleID], [ScenarioID], [AgentID], [StartTime], [EndTime], [LogFilename], [Status], [PercentsPassed], [PercentsSkipped], [PercentsFailed]) VALUES (@ScheduleID, @ScenarioID, @AgentID, @StartTime, @EndTime, @LogFilename, @Status, @PercentsPassed, @PercentsSkipped, @PercentsFailed);
SELECT ID, ScheduleID, ScenarioID, AgentID, StartTime, EndTime, LogFilename, Status, PercentsPassed, PercentsSkipped, PercentsFailed FROM Runs WHERE (ID = SCOPE_IDENTITY())";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScheduleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScheduleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LogFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LogFilename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PercentsPassed", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsPassed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PercentsSkipped", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsSkipped", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PercentsFailed", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsFailed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Runs] SET [ScheduleID] = @ScheduleID, [ScenarioID] = @ScenarioID, [AgentID] = @AgentID, [StartTime] = @StartTime, [EndTime] = @EndTime, [LogFilename] = @LogFilename, [Status] = @Status, [PercentsPassed] = @PercentsPassed, [PercentsSkipped] = @PercentsSkipped, [PercentsFailed] = @PercentsFailed WHERE (([ID] = @Original_ID) AND ((@IsNull_ScheduleID = 1 AND [ScheduleID] IS NULL) OR ([ScheduleID] = @Original_ScheduleID)) AND ((@IsNull_ScenarioID = 1 AND [ScenarioID] IS NULL) OR ([ScenarioID] = @Original_ScenarioID)) AND ((@IsNull_AgentID = 1 AND [AgentID] IS NULL) OR ([AgentID] = @Original_AgentID)) AND ((@IsNull_StartTime = 1 AND [StartTime] IS NULL) OR ([StartTime] = @Original_StartTime)) AND ((@IsNull_EndTime = 1 AND [EndTime] IS NULL) OR ([EndTime] = @Original_EndTime)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Status)) AND ((@IsNull_PercentsPassed = 1 AND [PercentsPassed] IS NULL) OR ([PercentsPassed] = @Original_PercentsPassed)) AND ((@IsNull_PercentsSkipped = 1 AND [PercentsSkipped] IS NULL) OR ([PercentsSkipped] = @Original_PercentsSkipped)) AND ((@IsNull_PercentsFailed = 1 AND [PercentsFailed] IS NULL) OR ([PercentsFailed] = @Original_PercentsFailed)));
SELECT ID, ScheduleID, ScenarioID, AgentID, StartTime, EndTime, LogFilename, Status, PercentsPassed, PercentsSkipped, PercentsFailed FROM Runs WHERE (ID = @ID)";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScheduleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScheduleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LogFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LogFilename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PercentsPassed", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsPassed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PercentsSkipped", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsSkipped", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PercentsFailed", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsFailed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ScheduleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScheduleID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScheduleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScheduleID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PercentsPassed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsPassed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PercentsPassed", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsPassed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PercentsSkipped", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsSkipped", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PercentsSkipped", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsSkipped", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PercentsFailed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsFailed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PercentsFailed", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentsFailed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, ScheduleID, ScenarioID, AgentID, StartTime, EndTime, LogFilename, Stat" +
				"us, PercentsPassed, PercentsSkipped, PercentsFailed FROM dbo.Runs";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(AutomationDataSet.RunsDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual AutomationDataSet.RunsDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			AutomationDataSet.RunsDataTable dataTable = new AutomationDataSet.RunsDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet.RunsDataTable dataTable) {
			return this.Adapter.Update(dataTable);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet dataSet) {
			return this.Adapter.Update(dataSet, "Runs");
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow) {
			return this.Adapter.Update(new global::System.Data.DataRow[] {
						dataRow});
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows) {
			return this.Adapter.Update(dataRows);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, global::System.Nullable<int> Original_ScheduleID, global::System.Nullable<int> Original_ScenarioID, global::System.Nullable<int> Original_AgentID, global::System.Nullable<global::System.DateTime> Original_StartTime, global::System.Nullable<global::System.DateTime> Original_EndTime, global::System.Nullable<int> Original_Status, global::System.Nullable<double> Original_PercentsPassed, global::System.Nullable<double> Original_PercentsSkipped, global::System.Nullable<double> Original_PercentsFailed) {
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
			if ((Original_ScheduleID.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ScheduleID.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((Original_ScenarioID.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ScenarioID.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((Original_AgentID.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_AgentID.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			if ((Original_StartTime.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_StartTime.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			if ((Original_EndTime.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_EndTime.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
			}
			if ((Original_Status.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_Status.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
			}
			if ((Original_PercentsPassed.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_PercentsPassed.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
			}
			if ((Original_PercentsSkipped.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_PercentsSkipped.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
			}
			if ((Original_PercentsFailed.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_PercentsFailed.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(global::System.Nullable<int> ScheduleID, global::System.Nullable<int> ScenarioID, global::System.Nullable<int> AgentID, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime, string LogFilename, global::System.Nullable<int> Status, global::System.Nullable<double> PercentsPassed, global::System.Nullable<double> PercentsSkipped, global::System.Nullable<double> PercentsFailed) {
			if ((ScheduleID.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ScheduleID.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
			}
			if ((ScenarioID.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ScenarioID.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			if ((AgentID.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[2].Value = ((int)(AgentID.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((StartTime.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(StartTime.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((EndTime.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EndTime.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((LogFilename == null)) {
				this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[5].Value = ((string)(LogFilename));
			}
			if ((Status.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Status.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			if ((PercentsPassed.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[7].Value = ((double)(PercentsPassed.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
			}
			if ((PercentsSkipped.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[8].Value = ((double)(PercentsSkipped.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			if ((PercentsFailed.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[9].Value = ((double)(PercentsFailed.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(
					global::System.Nullable<int> ScheduleID, 
					global::System.Nullable<int> ScenarioID, 
					global::System.Nullable<int> AgentID, 
					global::System.Nullable<global::System.DateTime> StartTime, 
					global::System.Nullable<global::System.DateTime> EndTime, 
					string LogFilename, 
					global::System.Nullable<int> Status, 
					global::System.Nullable<double> PercentsPassed, 
					global::System.Nullable<double> PercentsSkipped, 
					global::System.Nullable<double> PercentsFailed, 
					int Original_ID, 
					global::System.Nullable<int> Original_ScheduleID, 
					global::System.Nullable<int> Original_ScenarioID, 
					global::System.Nullable<int> Original_AgentID, 
					global::System.Nullable<global::System.DateTime> Original_StartTime, 
					global::System.Nullable<global::System.DateTime> Original_EndTime, 
					global::System.Nullable<int> Original_Status, 
					global::System.Nullable<double> Original_PercentsPassed, 
					global::System.Nullable<double> Original_PercentsSkipped, 
					global::System.Nullable<double> Original_PercentsFailed, 
					int ID) {
			if ((ScheduleID.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ScheduleID.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
			}
			if ((ScenarioID.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ScenarioID.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			if ((AgentID.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(AgentID.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((StartTime.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(StartTime.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((EndTime.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EndTime.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((LogFilename == null)) {
				this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(LogFilename));
			}
			if ((Status.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Status.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			if ((PercentsPassed.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(PercentsPassed.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
			}
			if ((PercentsSkipped.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(PercentsSkipped.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			if ((PercentsFailed.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(PercentsFailed.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
			}
			this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ID));
			if ((Original_ScheduleID.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_ScheduleID.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
			}
			if ((Original_ScenarioID.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_ScenarioID.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
			}
			if ((Original_AgentID.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_AgentID.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
			}
			if ((Original_StartTime.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_StartTime.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
			}
			if ((Original_EndTime.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_EndTime.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
			}
			if ((Original_Status.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_Status.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
			}
			if ((Original_PercentsPassed.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(Original_PercentsPassed.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
			}
			if ((Original_PercentsSkipped.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(Original_PercentsSkipped.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
			}
			if ((Original_PercentsFailed.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[28].Value = ((double)(Original_PercentsFailed.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
			}
			this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(ID));
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(
					global::System.Nullable<int> ScheduleID, 
					global::System.Nullable<int> ScenarioID, 
					global::System.Nullable<int> AgentID, 
					global::System.Nullable<global::System.DateTime> StartTime, 
					global::System.Nullable<global::System.DateTime> EndTime, 
					string LogFilename, 
					global::System.Nullable<int> Status, 
					global::System.Nullable<double> PercentsPassed, 
					global::System.Nullable<double> PercentsSkipped, 
					global::System.Nullable<double> PercentsFailed, 
					int Original_ID, 
					global::System.Nullable<int> Original_ScheduleID, 
					global::System.Nullable<int> Original_ScenarioID, 
					global::System.Nullable<int> Original_AgentID, 
					global::System.Nullable<global::System.DateTime> Original_StartTime, 
					global::System.Nullable<global::System.DateTime> Original_EndTime, 
					global::System.Nullable<int> Original_Status, 
					global::System.Nullable<double> Original_PercentsPassed, 
					global::System.Nullable<double> Original_PercentsSkipped, 
					global::System.Nullable<double> Original_PercentsFailed) {
			return this.Update(ScheduleID, ScenarioID, AgentID, StartTime, EndTime, LogFilename, Status, PercentsPassed, PercentsSkipped, PercentsFailed, Original_ID, Original_ScheduleID, Original_ScenarioID, Original_AgentID, Original_StartTime, Original_EndTime, Original_Status, Original_PercentsPassed, Original_PercentsSkipped, Original_PercentsFailed, Original_ID);
		}
	}
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class ScenariosTableAdapter : global::System.ComponentModel.Component {
		
		private global::System.Data.SqlClient.SqlDataAdapter _adapter;
		
		private global::System.Data.SqlClient.SqlConnection _connection;
		
		private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
		
		private bool _clearBeforeFill;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public ScenariosTableAdapter() {
			this.ClearBeforeFill = true;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private global::System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal global::System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "Scenarios";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("Name", "Name");
			tableMapping.ColumnMappings.Add("Description", "Description");
			tableMapping.ColumnMappings.Add("Filename", "Filename");
			tableMapping.ColumnMappings.Add("Attachments", "Attachments");
			tableMapping.ColumnMappings.Add("LastModified", "LastModified");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Scenarios] WHERE (([ID] = @Original_ID) AND ([Name] = @Origina" +
				"l_Name) AND ((@IsNull_LastModified = 1 AND [LastModified] IS NULL) OR ([LastModi" +
				"fied] = @Original_LastModified)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastModified", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModified", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModified", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Scenarios] ([Name], [Description], [Filename], [LastModified], [Attachments]) VALUES (@Name, @Description, @Filename, @LastModified, @Attachments);
SELECT ID, Name, Description, Filename, LastModified, Attachments FROM Scenarios WHERE (ID = SCOPE_IDENTITY())";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Filename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModified", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Attachments", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Attachments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Scenarios] SET [Name] = @Name, [Description] = @Description, [Filename] = @Filename, [LastModified] = @LastModified, [Attachments] = @Attachments WHERE (([ID] = @Original_ID) AND ([Name] = @Original_Name) AND ((@IsNull_LastModified = 1 AND [LastModified] IS NULL) OR ([LastModified] = @Original_LastModified)));
SELECT ID, Name, Description, Filename, LastModified, Attachments FROM Scenarios WHERE (ID = @ID)";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Filename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModified", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Attachments", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Attachments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastModified", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModified", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastModified", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastModified", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, Name, Description, Filename, LastModified, Attachments FROM dbo.Scenar" +
				"ios";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[1].Connection = this.Connection;
			this._commandCollection[1].CommandText = "SELECT Attachments, Description, Filename, ID, LastModified, Name FROM Scenarios " +
				"WHERE (ID = @id)";
			this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(AutomationDataSet.ScenariosDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual AutomationDataSet.ScenariosDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			AutomationDataSet.ScenariosDataTable dataTable = new AutomationDataSet.ScenariosDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
		public virtual AutomationDataSet.ScenariosDataTable GetDataBy(int id) {
			this.Adapter.SelectCommand = this.CommandCollection[1];
			this.Adapter.SelectCommand.Parameters[0].Value = ((int)(id));
			AutomationDataSet.ScenariosDataTable dataTable = new AutomationDataSet.ScenariosDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet.ScenariosDataTable dataTable) {
			return this.Adapter.Update(dataTable);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet dataSet) {
			return this.Adapter.Update(dataSet, "Scenarios");
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow) {
			return this.Adapter.Update(new global::System.Data.DataRow[] {
						dataRow});
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows) {
			return this.Adapter.Update(dataRows);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_Name, global::System.Nullable<global::System.DateTime> Original_LastModified) {
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
			if ((Original_Name == null)) {
				throw new global::System.ArgumentNullException("Original_Name");
			}
			else {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
			}
			if ((Original_LastModified.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_LastModified.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(string Name, string Description, string Filename, global::System.Nullable<global::System.DateTime> LastModified, string Attachments) {
			if ((Name == null)) {
				throw new global::System.ArgumentNullException("Name");
			}
			else {
				this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
			}
			if ((Description == null)) {
				this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
			}
			if ((Filename == null)) {
				throw new global::System.ArgumentNullException("Filename");
			}
			else {
				this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Filename));
			}
			if ((LastModified.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(LastModified.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((Attachments == null)) {
				this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Attachments));
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string Name, string Description, string Filename, global::System.Nullable<global::System.DateTime> LastModified, string Attachments, int Original_ID, string Original_Name, global::System.Nullable<global::System.DateTime> Original_LastModified, int ID) {
			if ((Name == null)) {
				throw new global::System.ArgumentNullException("Name");
			}
			else {
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
			}
			if ((Description == null)) {
				this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
			}
			if ((Filename == null)) {
				throw new global::System.ArgumentNullException("Filename");
			}
			else {
				this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Filename));
			}
			if ((LastModified.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(LastModified.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((Attachments == null)) {
				this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Attachments));
			}
			this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID));
			if ((Original_Name == null)) {
				throw new global::System.ArgumentNullException("Original_Name");
			}
			else {
				this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Name));
			}
			if ((Original_LastModified.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_LastModified.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ID));
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string Name, string Description, string Filename, global::System.Nullable<global::System.DateTime> LastModified, string Attachments, int Original_ID, string Original_Name, global::System.Nullable<global::System.DateTime> Original_LastModified) {
			return this.Update(Name, Description, Filename, LastModified, Attachments, Original_ID, Original_Name, Original_LastModified, Original_ID);
		}
	}
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class SchedulesTableAdapter : global::System.ComponentModel.Component {
		
		private global::System.Data.SqlClient.SqlDataAdapter _adapter;
		
		private global::System.Data.SqlClient.SqlConnection _connection;
		
		private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
		
		private bool _clearBeforeFill;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public SchedulesTableAdapter() {
			this.ClearBeforeFill = true;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private global::System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal global::System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "Schedules";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("AgentID", "AgentID");
			tableMapping.ColumnMappings.Add("ScenarioID", "ScenarioID");
			tableMapping.ColumnMappings.Add("UserID", "UserID");
			tableMapping.ColumnMappings.Add("StartTime", "StartTime");
			tableMapping.ColumnMappings.Add("EndTime", "EndTime");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Schedules] WHERE (([ID] = @Original_ID) AND ([AgentID] = @Original_AgentID) AND ([ScenarioID] = @Original_ScenarioID) AND ((@IsNull_UserID = 1 AND [UserID] IS NULL) OR ([UserID] = @Original_UserID)) AND ((@IsNull_StartTime = 1 AND [StartTime] IS NULL) OR ([StartTime] = @Original_StartTime)) AND ((@IsNull_EndTime = 1 AND [EndTime] IS NULL) OR ([EndTime] = @Original_EndTime)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Schedules] ([AgentID], [ScenarioID], [UserID], [StartTime], [EndTime]) VALUES (@AgentID, @ScenarioID, @UserID, @StartTime, @EndTime);
SELECT ID, AgentID, ScenarioID, UserID, StartTime, EndTime FROM Schedules WHERE (ID = SCOPE_IDENTITY())";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Schedules] SET [AgentID] = @AgentID, [ScenarioID] = @ScenarioID, [UserID] = @UserID, [StartTime] = @StartTime, [EndTime] = @EndTime WHERE (([ID] = @Original_ID) AND ([AgentID] = @Original_AgentID) AND ([ScenarioID] = @Original_ScenarioID) AND ((@IsNull_UserID = 1 AND [UserID] IS NULL) OR ([UserID] = @Original_UserID)) AND ((@IsNull_StartTime = 1 AND [StartTime] IS NULL) OR ([StartTime] = @Original_StartTime)) AND ((@IsNull_EndTime = 1 AND [EndTime] IS NULL) OR ([EndTime] = @Original_EndTime)));
SELECT ID, AgentID, ScenarioID, UserID, StartTime, EndTime FROM Schedules WHERE (ID = @ID)";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AgentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScenarioID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, AgentID, ScenarioID, UserID, StartTime, EndTime FROM dbo.Schedules";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[1].Connection = this.Connection;
			this._commandCollection[1].CommandText = "DELETE FROM [dbo].[Schedules] WHERE ([ID] = @ScheduleID) ";
			this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScheduleID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[2].Connection = this.Connection;
			this._commandCollection[2].CommandText = "SELECT ID, AgentID, ScenarioID, UserID, StartTime, EndTime FROM dbo.Schedules\r\nWH" +
				"ERE ID = @scheduleID";
			this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scheduleID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[3].Connection = this.Connection;
			this._commandCollection[3].CommandText = "UPDATE [dbo].[Schedules] SET [AgentID] = @AgentID, [ScenarioID] = @ScenarioID, [U" +
				"serID] = @UserID, [StartTime] = @StartTime, [EndTime] = @EndTime WHERE ([ID] = @" +
				"ScheduleID)";
			this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AgentID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "AgentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScenarioID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ScenarioID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScheduleID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(AutomationDataSet.SchedulesDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual AutomationDataSet.SchedulesDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			AutomationDataSet.SchedulesDataTable dataTable = new AutomationDataSet.SchedulesDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
		public virtual AutomationDataSet.SchedulesDataTable GetDataByScheduleID(int scheduleID) {
			this.Adapter.SelectCommand = this.CommandCollection[2];
			this.Adapter.SelectCommand.Parameters[0].Value = ((int)(scheduleID));
			AutomationDataSet.SchedulesDataTable dataTable = new AutomationDataSet.SchedulesDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet.SchedulesDataTable dataTable) {
			return this.Adapter.Update(dataTable);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet dataSet) {
			return this.Adapter.Update(dataSet, "Schedules");
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow) {
			return this.Adapter.Update(new global::System.Data.DataRow[] {
						dataRow});
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows) {
			return this.Adapter.Update(dataRows);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, int Original_AgentID, int Original_ScenarioID, global::System.Nullable<int> Original_UserID, global::System.Nullable<global::System.DateTime> Original_StartTime, global::System.Nullable<global::System.DateTime> Original_EndTime) {
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
			this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_AgentID));
			this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ScenarioID));
			if ((Original_UserID.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_UserID.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((Original_StartTime.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_StartTime.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			if ((Original_EndTime.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_EndTime.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(int AgentID, int ScenarioID, global::System.Nullable<int> UserID, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime) {
			this.Adapter.InsertCommand.Parameters[0].Value = ((int)(AgentID));
			this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ScenarioID));
			if ((UserID.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[2].Value = ((int)(UserID.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((StartTime.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(StartTime.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((EndTime.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EndTime.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(int AgentID, int ScenarioID, global::System.Nullable<int> UserID, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime, int Original_ID, int Original_AgentID, int Original_ScenarioID, global::System.Nullable<int> Original_UserID, global::System.Nullable<global::System.DateTime> Original_StartTime, global::System.Nullable<global::System.DateTime> Original_EndTime, int ID) {
			this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(AgentID));
			this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ScenarioID));
			if ((UserID.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(UserID.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((StartTime.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(StartTime.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((EndTime.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EndTime.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID));
			this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_AgentID));
			this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ScenarioID));
			if ((Original_UserID.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_UserID.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
			}
			if ((Original_StartTime.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_StartTime.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
			}
			if ((Original_EndTime.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_EndTime.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
			}
			this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(ID));
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(int AgentID, int ScenarioID, global::System.Nullable<int> UserID, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime, int Original_ID, int Original_AgentID, int Original_ScenarioID, global::System.Nullable<int> Original_UserID, global::System.Nullable<global::System.DateTime> Original_StartTime, global::System.Nullable<global::System.DateTime> Original_EndTime) {
			return this.Update(AgentID, ScenarioID, UserID, StartTime, EndTime, Original_ID, Original_AgentID, Original_ScenarioID, Original_UserID, Original_StartTime, Original_EndTime, Original_ID);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
		public virtual int DeleteSimple(int ScheduleID) {
			global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
			command.Parameters[0].Value = ((int)(ScheduleID));
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
		public virtual int UpdateSimple(int AgentID, int ScenarioID, global::System.Nullable<int> UserID, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime, int ScheduleID) {
			global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
			command.Parameters[0].Value = ((int)(AgentID));
			command.Parameters[1].Value = ((int)(ScenarioID));
			if ((UserID.HasValue == true)) {
				command.Parameters[2].Value = ((int)(UserID.Value));
			}
			else {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((StartTime.HasValue == true)) {
				command.Parameters[3].Value = ((System.DateTime)(StartTime.Value));
			}
			else {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((EndTime.HasValue == true)) {
				command.Parameters[4].Value = ((System.DateTime)(EndTime.Value));
			}
			else {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			command.Parameters[5].Value = ((int)(ScheduleID));
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
	}
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class TestCaseResultsTableAdapter : global::System.ComponentModel.Component {
		
		private global::System.Data.SqlClient.SqlDataAdapter _adapter;
		
		private global::System.Data.SqlClient.SqlConnection _connection;
		
		private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
		
		private bool _clearBeforeFill;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public TestCaseResultsTableAdapter() {
			this.ClearBeforeFill = true;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private global::System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal global::System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "TestCaseResults";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("RunID", "RunID");
			tableMapping.ColumnMappings.Add("TestCaseID", "TestCaseID");
			tableMapping.ColumnMappings.Add("TimeStarted", "TimeStarted");
			tableMapping.ColumnMappings.Add("TimeEnded", "TimeEnded");
			tableMapping.ColumnMappings.Add("Status", "Status");
			tableMapping.ColumnMappings.Add("Errors", "Errors");
			tableMapping.ColumnMappings.Add("Warnings", "Warnings");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TestCaseResults] WHERE (([ID] = @Original_ID) AND ([RunID] = @Original_RunID) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_TimeStarted = 1 AND [TimeStarted] IS NULL) OR ([TimeStarted] = @Original_TimeStarted)) AND ((@IsNull_TimeEnded = 1 AND [TimeEnded] IS NULL) OR ([TimeEnded] = @Original_TimeEnded)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Status)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RunID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeStarted", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStarted", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeStarted", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStarted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeEnded", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnded", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeEnded", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnded", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TestCaseResults] ([RunID], [TestCaseID], [TimeStarted], [TimeEnded], [Status], [Errors], [Warnings]) VALUES (@RunID, @TestCaseID, @TimeStarted, @TimeEnded, @Status, @Errors, @Warnings);
SELECT ID, RunID, TestCaseID, TimeStarted, TimeEnded, Status, Errors, Warnings FROM TestCaseResults WHERE (ID = SCOPE_IDENTITY())";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeStarted", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStarted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeEnded", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnded", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Errors", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Errors", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Warnings", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Warnings", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TestCaseResults] SET [RunID] = @RunID, [TestCaseID] = @TestCaseID, [TimeStarted] = @TimeStarted, [TimeEnded] = @TimeEnded, [Status] = @Status, [Errors] = @Errors, [Warnings] = @Warnings WHERE (([ID] = @Original_ID) AND ([RunID] = @Original_RunID) AND ([TestCaseID] = @Original_TestCaseID) AND ((@IsNull_TimeStarted = 1 AND [TimeStarted] IS NULL) OR ([TimeStarted] = @Original_TimeStarted)) AND ((@IsNull_TimeEnded = 1 AND [TimeEnded] IS NULL) OR ([TimeEnded] = @Original_TimeEnded)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Status)));
SELECT ID, RunID, TestCaseID, TimeStarted, TimeEnded, Status, Errors, Warnings FROM TestCaseResults WHERE (ID = @ID)";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestCaseID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeStarted", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStarted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeEnded", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnded", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Errors", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Errors", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Warnings", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Warnings", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RunID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestCaseID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestCaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeStarted", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStarted", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeStarted", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeStarted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeEnded", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnded", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeEnded", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnded", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, RunID, TestCaseID, TimeStarted, TimeEnded, Status, Errors, Warnings FR" +
				"OM dbo.TestCaseResults";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(AutomationDataSet.TestCaseResultsDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual AutomationDataSet.TestCaseResultsDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			AutomationDataSet.TestCaseResultsDataTable dataTable = new AutomationDataSet.TestCaseResultsDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet.TestCaseResultsDataTable dataTable) {
			return this.Adapter.Update(dataTable);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(AutomationDataSet dataSet) {
			return this.Adapter.Update(dataSet, "TestCaseResults");
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow) {
			return this.Adapter.Update(new global::System.Data.DataRow[] {
						dataRow});
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows) {
			return this.Adapter.Update(dataRows);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, int Original_RunID, int Original_TestCaseID, global::System.Nullable<global::System.DateTime> Original_TimeStarted, global::System.Nullable<global::System.DateTime> Original_TimeEnded, global::System.Nullable<int> Original_Status) {
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
			this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_RunID));
			this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_TestCaseID));
			if ((Original_TimeStarted.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_TimeStarted.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((Original_TimeEnded.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_TimeEnded.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			if ((Original_Status.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Status.Value));
			}
			else {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
				this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(int RunID, int TestCaseID, global::System.Nullable<global::System.DateTime> TimeStarted, global::System.Nullable<global::System.DateTime> TimeEnded, global::System.Nullable<int> Status, string Errors, string Warnings) {
			this.Adapter.InsertCommand.Parameters[0].Value = ((int)(RunID));
			this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TestCaseID));
			if ((TimeStarted.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(TimeStarted.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((TimeEnded.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(TimeEnded.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((Status.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Status.Value));
			}
			else {
				this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((Errors == null)) {
				this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Errors));
			}
			if ((Warnings == null)) {
				this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Warnings));
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(int RunID, int TestCaseID, global::System.Nullable<global::System.DateTime> TimeStarted, global::System.Nullable<global::System.DateTime> TimeEnded, global::System.Nullable<int> Status, string Errors, string Warnings, int Original_ID, int Original_RunID, int Original_TestCaseID, global::System.Nullable<global::System.DateTime> Original_TimeStarted, global::System.Nullable<global::System.DateTime> Original_TimeEnded, global::System.Nullable<int> Original_Status, int ID) {
			this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(RunID));
			this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TestCaseID));
			if ((TimeStarted.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(TimeStarted.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((TimeEnded.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(TimeEnded.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((Status.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Status.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((Errors == null)) {
				this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Errors));
			}
			if ((Warnings == null)) {
				this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			else {
				this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Warnings));
			}
			this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ID));
			this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_RunID));
			this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_TestCaseID));
			if ((Original_TimeStarted.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_TimeStarted.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
			}
			if ((Original_TimeEnded.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_TimeEnded.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
			}
			if ((Original_Status.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_Status.Value));
			}
			else {
				this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
				this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
			}
			this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(ID));
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(int RunID, int TestCaseID, global::System.Nullable<global::System.DateTime> TimeStarted, global::System.Nullable<global::System.DateTime> TimeEnded, global::System.Nullable<int> Status, string Errors, string Warnings, int Original_ID, int Original_RunID, int Original_TestCaseID, global::System.Nullable<global::System.DateTime> Original_TimeStarted, global::System.Nullable<global::System.DateTime> Original_TimeEnded, global::System.Nullable<int> Original_Status) {
			return this.Update(RunID, TestCaseID, TimeStarted, TimeEnded, Status, Errors, Warnings, Original_ID, Original_RunID, Original_TestCaseID, Original_TimeStarted, Original_TimeEnded, Original_Status, Original_ID);
		}
	}
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class ScehdulerDetailsTableAdapter : global::System.ComponentModel.Component {
		
		private global::System.Data.SqlClient.SqlDataAdapter _adapter;
		
		private global::System.Data.SqlClient.SqlConnection _connection;
		
		private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
		
		private bool _clearBeforeFill;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public ScehdulerDetailsTableAdapter() {
			this.ClearBeforeFill = true;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private global::System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal global::System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "ScehdulerDetails";
			tableMapping.ColumnMappings.Add("IP", "IP");
			tableMapping.ColumnMappings.Add("Name", "Name");
			tableMapping.ColumnMappings.Add("SceName", "SceName");
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("UserID", "UserID");
			tableMapping.ColumnMappings.Add("StartTime", "StartTime");
			tableMapping.ColumnMappings.Add("EndTime", "EndTime");
			tableMapping.ColumnMappings.Add("AgentID", "AgentID");
			tableMapping.ColumnMappings.Add("SceID", "SceID");
			tableMapping.ColumnMappings.Add("Status", "Status");
			tableMapping.ColumnMappings.Add("LogFilename", "LogFilename");
			this._adapter.TableMappings.Add(tableMapping);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = @"SELECT DISTINCT Agents.ID AS AgentID, Agents.IP, Agents.Name, Scenarios.Name AS SceName, Scenarios.ID AS SceID, Runs.Status, Runs.LogFilename, Schedules.ID, Schedules.UserID, Schedules.StartTime, Schedules.EndTime
FROM Schedules INNER JOIN Scenarios ON Schedules.ScenarioID = Scenarios.ID 
INNER JOIN Agents ON Agents.ID = Schedules.AgentID 
LEFT JOIN Runs ON Schedules.ID = Runs.ScheduleID";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
			this._commandCollection[1].Connection = this.Connection;
			this._commandCollection[1].CommandText = @"SELECT DISTINCT Agents.ID AS AgentID, Agents.IP, Agents.Name, Scenarios.Name AS SceName, Scenarios.ID AS SceID, Runs.Status, Runs.LogFilename, Schedules.ID, Schedules.UserID, Schedules.StartTime, Schedules.EndTime
FROM Schedules INNER JOIN Scenarios ON Schedules.ScenarioID = Scenarios.ID 
INNER JOIN Agents ON Agents.ID = Schedules.AgentID 
LEFT JOIN Runs ON Schedules.ID = Runs.ScheduleID
WHERE Schedules.ID=@ScheduleID";
			this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
			this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScheduleID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(AutomationDataSet.ScehdulerDetailsDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual AutomationDataSet.ScehdulerDetailsDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			AutomationDataSet.ScehdulerDetailsDataTable dataTable = new AutomationDataSet.ScehdulerDetailsDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
		public virtual int FillBy(AutomationDataSet.ScehdulerDetailsDataTable dataTable, int ScheduleID) {
			this.Adapter.SelectCommand = this.CommandCollection[1];
			this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ScheduleID));
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
		public virtual AutomationDataSet.ScehdulerDetailsDataTable GetDataBy(int ScheduleID) {
			this.Adapter.SelectCommand = this.CommandCollection[1];
			this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ScheduleID));
			AutomationDataSet.ScehdulerDetailsDataTable dataTable = new AutomationDataSet.ScehdulerDetailsDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}
	}
	
	/// <summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.ComponentModel.DataObjectAttribute(true)]
	[global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class AutomationStoredProcedures : global::System.ComponentModel.Component {
		
		private global::System.Data.IDbCommand[] _commandCollection;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected global::System.Data.IDbCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new global::System.Data.IDbCommand[12];
			this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.AddRun";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scheduleid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenarioid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@agentid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@starttime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@logfilename", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = "dbo.UpdateSchedule";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@agentID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenarioID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@starttime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@endtime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandText = "dbo.AddScenario";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@filename", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastmodified", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@attachments", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandText = "dbo.AddSchedule";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@agentID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenarioID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@starttime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@endtime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).CommandText = "dbo.ChangeAgentStatus";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).CommandText = "dbo.FindAgent";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ip", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).CommandText = "dbo.InsertTestCaseResult";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@runid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@testcaseName", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@timestarted", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@errors", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@warnings", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@timeended", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).CommandText = "dbo.RegisterAgent";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ip", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpu", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@memory", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@model", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@os", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).CommandText = "dbo.RemoveScenario";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).CommandText = "dbo.RemoveSchedule";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).CommandText = "dbo.UpdateRun";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@endtime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@percentsPassed", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@percentsSkipped", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@percentsFailed", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Connection = new global::System.Data.SqlClient.SqlConnection(global::QAliber.DAL.Properties.Settings.Default.AutomationConnectionString);
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).CommandText = "dbo.InsertOrGetTestCase";
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).CommandType = global::System.Data.CommandType.StoredProcedure;
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@desc", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@helpurl", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dllname", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual object AddRun(global::System.Nullable<int> scheduleid, global::System.Nullable<int> scenarioid, global::System.Nullable<int> agentid, global::System.Nullable<global::System.DateTime> starttime, string logfilename) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
			if ((scheduleid.HasValue == true)) {
				command.Parameters[1].Value = ((int)(scheduleid.Value));
			}
			else {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			if ((scenarioid.HasValue == true)) {
				command.Parameters[2].Value = ((int)(scenarioid.Value));
			}
			else {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((agentid.HasValue == true)) {
				command.Parameters[3].Value = ((int)(agentid.Value));
			}
			else {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((starttime.HasValue == true)) {
				command.Parameters[4].Value = ((System.DateTime)(starttime.Value));
			}
			else {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((logfilename == null)) {
				command.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[5].Value = ((string)(logfilename));
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			object returnValue;
			try {
				returnValue = command.ExecuteScalar();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			if (((returnValue == null) 
						|| (returnValue.GetType() == typeof(global::System.DBNull)))) {
				return null;
			}
			else {
				return ((object)(returnValue));
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int UpdateSchedule(global::System.Nullable<int> id, global::System.Nullable<int> agentID, global::System.Nullable<int> scenarioID, global::System.Nullable<global::System.DateTime> starttime, global::System.Nullable<global::System.DateTime> endtime, global::System.Nullable<int> userid) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
			if ((id.HasValue == true)) {
				command.Parameters[1].Value = ((int)(id.Value));
			}
			else {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			if ((agentID.HasValue == true)) {
				command.Parameters[2].Value = ((int)(agentID.Value));
			}
			else {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((scenarioID.HasValue == true)) {
				command.Parameters[3].Value = ((int)(scenarioID.Value));
			}
			else {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((starttime.HasValue == true)) {
				command.Parameters[4].Value = ((System.DateTime)(starttime.Value));
			}
			else {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((endtime.HasValue == true)) {
				command.Parameters[5].Value = ((System.DateTime)(endtime.Value));
			}
			else {
				command.Parameters[5].Value = global::System.DBNull.Value;
			}
			if ((userid.HasValue == true)) {
				command.Parameters[6].Value = ((int)(userid.Value));
			}
			else {
				command.Parameters[6].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual object AddScenario(string name, string filename, global::System.Nullable<global::System.DateTime> lastmodified, string description, string attachments) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[2]));
			if ((name == null)) {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[1].Value = ((string)(name));
			}
			if ((filename == null)) {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[2].Value = ((string)(filename));
			}
			if ((lastmodified.HasValue == true)) {
				command.Parameters[3].Value = ((System.DateTime)(lastmodified.Value));
			}
			else {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((description == null)) {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[4].Value = ((string)(description));
			}
			if ((attachments == null)) {
				command.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[5].Value = ((string)(attachments));
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			object returnValue;
			try {
				returnValue = command.ExecuteScalar();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			if (((returnValue == null) 
						|| (returnValue.GetType() == typeof(global::System.DBNull)))) {
				return null;
			}
			else {
				return ((object)(returnValue));
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int AddSchedule(global::System.Nullable<int> agentID, global::System.Nullable<int> scenarioID, global::System.Nullable<global::System.DateTime> starttime, global::System.Nullable<global::System.DateTime> endtime, global::System.Nullable<int> userid) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[3]));
			if ((agentID.HasValue == true)) {
				command.Parameters[1].Value = ((int)(agentID.Value));
			}
			else {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			if ((scenarioID.HasValue == true)) {
				command.Parameters[2].Value = ((int)(scenarioID.Value));
			}
			else {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((starttime.HasValue == true)) {
				command.Parameters[3].Value = ((System.DateTime)(starttime.Value));
			}
			else {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((endtime.HasValue == true)) {
				command.Parameters[4].Value = ((System.DateTime)(endtime.Value));
			}
			else {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((userid.HasValue == true)) {
				command.Parameters[5].Value = ((int)(userid.Value));
			}
			else {
				command.Parameters[5].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int ChangeAgentStatus(global::System.Nullable<int> id, global::System.Nullable<int> status) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[4]));
			if ((id.HasValue == true)) {
				command.Parameters[1].Value = ((int)(id.Value));
			}
			else {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			if ((status.HasValue == true)) {
				command.Parameters[2].Value = ((int)(status.Value));
			}
			else {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual object FindAgent(string ip, string name) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[5]));
			if ((ip == null)) {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[1].Value = ((string)(ip));
			}
			if ((name == null)) {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[2].Value = ((string)(name));
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			object returnValue;
			try {
				returnValue = command.ExecuteScalar();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			if (((returnValue == null) 
						|| (returnValue.GetType() == typeof(global::System.DBNull)))) {
				return null;
			}
			else {
				return ((object)(returnValue));
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int InsertTestCaseResult(global::System.Nullable<int> runid, string testcaseName, global::System.Nullable<global::System.DateTime> timestarted, global::System.Nullable<int> status, string errors, string warnings, global::System.Nullable<global::System.DateTime> timeended) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[6]));
			if ((runid.HasValue == true)) {
				command.Parameters[1].Value = ((int)(runid.Value));
			}
			else {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			if ((testcaseName == null)) {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[2].Value = ((string)(testcaseName));
			}
			if ((timestarted.HasValue == true)) {
				command.Parameters[3].Value = ((System.DateTime)(timestarted.Value));
			}
			else {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((status.HasValue == true)) {
				command.Parameters[4].Value = ((int)(status.Value));
			}
			else {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((errors == null)) {
				command.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[5].Value = ((string)(errors));
			}
			if ((warnings == null)) {
				command.Parameters[6].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[6].Value = ((string)(warnings));
			}
			if ((timeended.HasValue == true)) {
				command.Parameters[7].Value = ((System.DateTime)(timeended.Value));
			}
			else {
				command.Parameters[7].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual object RegisterAgent(string ip, string name, string cpu, global::System.Nullable<int> memory, string model, string os, global::System.Nullable<int> status) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[7]));
			if ((ip == null)) {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[1].Value = ((string)(ip));
			}
			if ((name == null)) {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[2].Value = ((string)(name));
			}
			if ((cpu == null)) {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[3].Value = ((string)(cpu));
			}
			if ((memory.HasValue == true)) {
				command.Parameters[4].Value = ((int)(memory.Value));
			}
			else {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((model == null)) {
				command.Parameters[5].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[5].Value = ((string)(model));
			}
			if ((os == null)) {
				command.Parameters[6].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[6].Value = ((string)(os));
			}
			if ((status.HasValue == true)) {
				command.Parameters[7].Value = ((int)(status.Value));
			}
			else {
				command.Parameters[7].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			object returnValue;
			try {
				returnValue = command.ExecuteScalar();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			if (((returnValue == null) 
						|| (returnValue.GetType() == typeof(global::System.DBNull)))) {
				return null;
			}
			else {
				return ((object)(returnValue));
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int RemoveScenario(global::System.Nullable<int> id) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[8]));
			if ((id.HasValue == true)) {
				command.Parameters[1].Value = ((int)(id.Value));
			}
			else {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int RemoveSchedule(global::System.Nullable<int> id) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[9]));
			if ((id.HasValue == true)) {
				command.Parameters[1].Value = ((int)(id.Value));
			}
			else {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int UpdateRun(global::System.Nullable<int> id, global::System.Nullable<global::System.DateTime> endtime, global::System.Nullable<int> status, global::System.Nullable<double> percentsPassed, global::System.Nullable<double> percentsSkipped, global::System.Nullable<double> percentsFailed) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[10]));
			if ((id.HasValue == true)) {
				command.Parameters[1].Value = ((int)(id.Value));
			}
			else {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			if ((endtime.HasValue == true)) {
				command.Parameters[2].Value = ((System.DateTime)(endtime.Value));
			}
			else {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((status.HasValue == true)) {
				command.Parameters[3].Value = ((int)(status.Value));
			}
			else {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			if ((percentsPassed.HasValue == true)) {
				command.Parameters[4].Value = ((double)(percentsPassed.Value));
			}
			else {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			if ((percentsSkipped.HasValue == true)) {
				command.Parameters[5].Value = ((double)(percentsSkipped.Value));
			}
			else {
				command.Parameters[5].Value = global::System.DBNull.Value;
			}
			if ((percentsFailed.HasValue == true)) {
				command.Parameters[6].Value = ((double)(percentsFailed.Value));
			}
			else {
				command.Parameters[6].Value = global::System.DBNull.Value;
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			int returnValue;
			try {
				returnValue = command.ExecuteNonQuery();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			return returnValue;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual object InsertOrGetTestCase(string name, string desc, string helpurl, string dllname) {
			global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[11]));
			if ((name == null)) {
				command.Parameters[1].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[1].Value = ((string)(name));
			}
			if ((desc == null)) {
				command.Parameters[2].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[2].Value = ((string)(desc));
			}
			if ((helpurl == null)) {
				command.Parameters[3].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[3].Value = ((string)(helpurl));
			}
			if ((dllname == null)) {
				command.Parameters[4].Value = global::System.DBNull.Value;
			}
			else {
				command.Parameters[4].Value = ((string)(dllname));
			}
			global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
			if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
						!= global::System.Data.ConnectionState.Open)) {
				command.Connection.Open();
			}
			object returnValue;
			try {
				returnValue = command.ExecuteScalar();
			}
			finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					command.Connection.Close();
				}
			}
			if (((returnValue == null) 
						|| (returnValue.GetType() == typeof(global::System.DBNull)))) {
				return null;
			}
			else {
				return ((object)(returnValue));
			}
		}
	}
}

#pragma warning restore 1591