//------------------------------------------------------------------------------
// <auto-generated>
//	   This code was generated by a tool.
//	   Runtime Version:2.0.50727.3603
//
//	   Changes to this file may cause incorrect behavior and will be lost if
//	   the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QAliber.Recorder.MacroRecorder {
	
	
	/// <summary>
	///Represents a strongly typed in-memory cache of data.
	///</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[global::System.Serializable()]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItem(true)]
	[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
	[global::System.Xml.Serialization.XmlRootAttribute("MacroRecordingsDataSet")]
	[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
	public partial class MacroRecordingsDataSet : global::System.Data.DataSet {
		
		private MacroEntriesDataTable tableMacroEntries;
		
		private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public MacroRecordingsDataSet() {
			this.BeginInit();
			this.InitClass();
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			base.Relations.CollectionChanged += schemaChangedHandler;
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected MacroRecordingsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
				base(info, context, false) {
			if ((this.IsBinarySerialized(info, context) == true)) {
				this.InitVars(false);
				global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
				this.Tables.CollectionChanged += schemaChangedHandler1;
				this.Relations.CollectionChanged += schemaChangedHandler1;
				return;
			}
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
				if ((ds.Tables["MacroEntries"] != null)) {
					base.Tables.Add(new MacroEntriesDataTable(ds.Tables["MacroEntries"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else {
				this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
			}
			this.GetSerializationData(info, context);
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
		public MacroEntriesDataTable MacroEntries {
			get {
				return this.tableMacroEntries;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.BrowsableAttribute(true)]
		[global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
		public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
			get {
				return this._schemaSerializationMode;
			}
			set {
				this._schemaSerializationMode = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		public new global::System.Data.DataTableCollection Tables {
			get {
				return base.Tables;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		public new global::System.Data.DataRelationCollection Relations {
			get {
				return base.Relations;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override void InitializeDerivedDataSet() {
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public override global::System.Data.DataSet Clone() {
			MacroRecordingsDataSet cln = ((MacroRecordingsDataSet)(base.Clone()));
			cln.InitVars();
			cln.SchemaSerializationMode = this.SchemaSerializationMode;
			return cln;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override bool ShouldSerializeTables() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
			if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
				this.Reset();
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXml(reader);
				if ((ds.Tables["MacroEntries"] != null)) {
					base.Tables.Add(new MacroEntriesDataTable(ds.Tables["MacroEntries"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else {
				this.ReadXml(reader);
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
			this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
			stream.Position = 0;
			return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal void InitVars() {
			this.InitVars(true);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal void InitVars(bool initTable) {
			this.tableMacroEntries = ((MacroEntriesDataTable)(base.Tables["MacroEntries"]));
			if ((initTable == true)) {
				if ((this.tableMacroEntries != null)) {
					this.tableMacroEntries.InitVars();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitClass() {
			this.DataSetName = "MacroRecordingsDataSet";
			this.Prefix = "";
			this.Namespace = "http://tempuri.org/MacroRecordingsDataSet.xsd";
			this.EnforceConstraints = true;
			this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
			this.tableMacroEntries = new MacroEntriesDataTable();
			base.Tables.Add(this.tableMacroEntries);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeMacroEntries() {
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
			if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
			MacroRecordingsDataSet ds = new MacroRecordingsDataSet();
			global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
			global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
			global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
			if (xs.Contains(dsSchema.TargetNamespace)) {
				global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
				global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
				try {
					global::System.Xml.Schema.XmlSchema schema = null;
					dsSchema.Write(s1);
					for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
						schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
						s2.SetLength(0);
						schema.Write(s2);
						if ((s1.Length == s2.Length)) {
							s1.Position = 0;
							s2.Position = 0;
							for (; ((s1.Position != s1.Length) 
										&& (s1.ReadByte() == s2.ReadByte())); ) {
								;
							}
							if ((s1.Position == s1.Length)) {
								return type;
							}
						}
					}
				}
				finally {
					if ((s1 != null)) {
						s1.Close();
					}
					if ((s2 != null)) {
						s2.Close();
					}
				}
			}
			xs.Add(dsSchema);
			return type;
		}
		
		public delegate void MacroEntriesRowChangeEventHandler(object sender, MacroEntriesRowChangeEvent e);
		
		/// <summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[global::System.Serializable()]
		[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class MacroEntriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
			
			private global::System.Data.DataColumn columnTime;
			
			private global::System.Data.DataColumn columnX;
			
			private global::System.Data.DataColumn columnY;
			
			private global::System.Data.DataColumn columnAction;
			
			private global::System.Data.DataColumn columnPressed;
			
			private global::System.Data.DataColumn columnKey;
			
			private global::System.Data.DataColumn columnOrigIndex;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MacroEntriesDataTable() {
				this.TableName = "MacroEntries";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal MacroEntriesDataTable(global::System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected MacroEntriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
					base(info, context) {
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn TimeColumn {
				get {
					return this.columnTime;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn XColumn {
				get {
					return this.columnX;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn YColumn {
				get {
					return this.columnY;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn ActionColumn {
				get {
					return this.columnAction;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn PressedColumn {
				get {
					return this.columnPressed;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn KeyColumn {
				get {
					return this.columnKey;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataColumn OrigIndexColumn {
				get {
					return this.columnOrigIndex;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[global::System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MacroEntriesRow this[int index] {
				get {
					return ((MacroEntriesRow)(this.Rows[index]));
				}
			}
			
			public event MacroEntriesRowChangeEventHandler MacroEntriesRowChanging;
			
			public event MacroEntriesRowChangeEventHandler MacroEntriesRowChanged;
			
			public event MacroEntriesRowChangeEventHandler MacroEntriesRowDeleting;
			
			public event MacroEntriesRowChangeEventHandler MacroEntriesRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddMacroEntriesRow(MacroEntriesRow row) {
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MacroEntriesRow AddMacroEntriesRow(int Time, int X, int Y, string Action, bool Pressed, string Key, int OrigIndex) {
				MacroEntriesRow rowMacroEntriesRow = ((MacroEntriesRow)(this.NewRow()));
				object[] columnValuesArray = new object[] {
						Time,
						X,
						Y,
						Action,
						Pressed,
						Key,
						OrigIndex};
				rowMacroEntriesRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowMacroEntriesRow);
				return rowMacroEntriesRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual global::System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override global::System.Data.DataTable Clone() {
				MacroEntriesDataTable cln = ((MacroEntriesDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataTable CreateInstance() {
				return new MacroEntriesDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnTime = base.Columns["Time"];
				this.columnX = base.Columns["X"];
				this.columnY = base.Columns["Y"];
				this.columnAction = base.Columns["Action"];
				this.columnPressed = base.Columns["Pressed"];
				this.columnKey = base.Columns["Key"];
				this.columnOrigIndex = base.Columns["OrigIndex"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnTime = new global::System.Data.DataColumn("Time", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnTime);
				this.columnX = new global::System.Data.DataColumn("X", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnX);
				this.columnY = new global::System.Data.DataColumn("Y", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnY);
				this.columnAction = new global::System.Data.DataColumn("Action", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnAction);
				this.columnPressed = new global::System.Data.DataColumn("Pressed", typeof(bool), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnPressed);
				this.columnKey = new global::System.Data.DataColumn("Key", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnKey);
				this.columnOrigIndex = new global::System.Data.DataColumn("OrigIndex", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnOrigIndex);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MacroEntriesRow NewMacroEntriesRow() {
				return ((MacroEntriesRow)(this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
				return new MacroEntriesRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override global::System.Type GetRowType() {
				return typeof(MacroEntriesRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.MacroEntriesRowChanged != null)) {
					this.MacroEntriesRowChanged(this, new MacroEntriesRowChangeEvent(((MacroEntriesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.MacroEntriesRowChanging != null)) {
					this.MacroEntriesRowChanging(this, new MacroEntriesRowChangeEvent(((MacroEntriesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.MacroEntriesRowDeleted != null)) {
					this.MacroEntriesRowDeleted(this, new MacroEntriesRowChangeEvent(((MacroEntriesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.MacroEntriesRowDeleting != null)) {
					this.MacroEntriesRowDeleting(this, new MacroEntriesRowChangeEvent(((MacroEntriesRow)(e.Row)), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveMacroEntriesRow(MacroEntriesRow row) {
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				MacroRecordingsDataSet ds = new MacroRecordingsDataSet();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "MacroEntriesDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace)) {
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try {
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
							schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);
							if ((s1.Length == s2.Length)) {
								s1.Position = 0;
								s2.Position = 0;
								for (; ((s1.Position != s1.Length) 
											&& (s1.ReadByte() == s2.ReadByte())); ) {
									;
								}
								if ((s1.Position == s1.Length)) {
									return type;
								}
							}
						}
					}
					finally {
						if ((s1 != null)) {
							s1.Close();
						}
						if ((s2 != null)) {
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		/// <summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class MacroEntriesRow : global::System.Data.DataRow {
			
			private MacroEntriesDataTable tableMacroEntries;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal MacroEntriesRow(global::System.Data.DataRowBuilder rb) : 
					base(rb) {
				this.tableMacroEntries = ((MacroEntriesDataTable)(this.Table));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int Time {
				get {
					try {
						return ((int)(this[this.tableMacroEntries.TimeColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Time\' in table \'MacroEntries\' is DBNull.", e);
					}
				}
				set {
					this[this.tableMacroEntries.TimeColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int X {
				get {
					try {
						return ((int)(this[this.tableMacroEntries.XColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'X\' in table \'MacroEntries\' is DBNull.", e);
					}
				}
				set {
					this[this.tableMacroEntries.XColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int Y {
				get {
					try {
						return ((int)(this[this.tableMacroEntries.YColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Y\' in table \'MacroEntries\' is DBNull.", e);
					}
				}
				set {
					this[this.tableMacroEntries.YColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Action {
				get {
					try {
						return ((string)(this[this.tableMacroEntries.ActionColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Action\' in table \'MacroEntries\' is DBNull.", e);
					}
				}
				set {
					this[this.tableMacroEntries.ActionColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Pressed {
				get {
					try {
						return ((bool)(this[this.tableMacroEntries.PressedColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Pressed\' in table \'MacroEntries\' is DBNull.", e);
					}
				}
				set {
					this[this.tableMacroEntries.PressedColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Key {
				get {
					try {
						return ((string)(this[this.tableMacroEntries.KeyColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'Key\' in table \'MacroEntries\' is DBNull.", e);
					}
				}
				set {
					this[this.tableMacroEntries.KeyColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int OrigIndex {
				get {
					try {
						return ((int)(this[this.tableMacroEntries.OrigIndexColumn]));
					}
					catch (global::System.InvalidCastException e) {
						throw new global::System.Data.StrongTypingException("The value for column \'OrigIndex\' in table \'MacroEntries\' is DBNull.", e);
					}
				}
				set {
					this[this.tableMacroEntries.OrigIndexColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsTimeNull() {
				return this.IsNull(this.tableMacroEntries.TimeColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetTimeNull() {
				this[this.tableMacroEntries.TimeColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsXNull() {
				return this.IsNull(this.tableMacroEntries.XColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetXNull() {
				this[this.tableMacroEntries.XColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsYNull() {
				return this.IsNull(this.tableMacroEntries.YColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetYNull() {
				this[this.tableMacroEntries.YColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsActionNull() {
				return this.IsNull(this.tableMacroEntries.ActionColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetActionNull() {
				this[this.tableMacroEntries.ActionColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsPressedNull() {
				return this.IsNull(this.tableMacroEntries.PressedColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetPressedNull() {
				this[this.tableMacroEntries.PressedColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsKeyNull() {
				return this.IsNull(this.tableMacroEntries.KeyColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetKeyNull() {
				this[this.tableMacroEntries.KeyColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsOrigIndexNull() {
				return this.IsNull(this.tableMacroEntries.OrigIndexColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetOrigIndexNull() {
				this[this.tableMacroEntries.OrigIndexColumn] = global::System.Convert.DBNull;
			}
		}
		
		/// <summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class MacroEntriesRowChangeEvent : global::System.EventArgs {
			
			private MacroEntriesRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MacroEntriesRowChangeEvent(MacroEntriesRow row, global::System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MacroEntriesRow Row {
				get {
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public global::System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
	}
}

#pragma warning restore 1591